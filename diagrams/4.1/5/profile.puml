@startuml
!define DARKGREEN
!includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml

skinparam {
    Shadowing false
    Dpi 300
    ComponentBackgroundColor DarkSlateGrey
}

package views{
    component profile.hbs{

    }
}

package routes {
    package profile.js{
class profile{
    router.get('/', auth, async (req, res) => {
  res.render('profile', {
    title: 'Профиль',
    isProfile: true,
    user: req.user.toObject(),
  });
});

router.post('/', auth, async (req, res) => {
  try {
    const user = await User.findById(req.user._id);

    const toChange = {
      name: req.body.name,
    };

    if (req.file) {
      toChange.avatarUrl = req.file.path;}

    Object.assign(user, toChange);
    await user.save();
    res.redirect('/profile');
  } catch (e) {
    console.log(e);}
});
}
    }
}

package middleware{
    component auth.js{
        class isAuthenticated{
  module.exports = function (req, res, next) {
  if (!req.session.isAuthenticated) {
    return res.redirect('/auth/login');}
  next();
};
        }
    }
    component file.js{
        class file{
            const multer = require('multer');

const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'images');
  },
  filename: function (req, file, cb) {
    cb(null, file.fieldname + '-' + Date.now());
  },
});

const allowedTypes = ['image/png', 'image/jpg', 'image/jpeg'];

const fileFilter = (req, file, cb) => {
  if (allowedTypes.includes(file.mimetype)) {
    cb(null, true);
  } else {
    cb(null, false);}
};

module.exports = multer({
  storage,
  fileFilter,
});
        }
    }
}

package models{
    component user.js{
        class userSchema{
            const userSchema = new Schema({
  email: {
    type: String,
    required: true,
  },
  name: String,
  password: {
    type: String,
    required: true,
  },
  avatarUrl: String,
  resetToken: String,
  resetTokenExp: Date,
  cart: {
    items: [
      {
        count: {
          type: Number,
          required: true,
          default: 1,
        },
        courseId: {
          type: Schema.Types.ObjectId,
          ref: 'Course',
          required: true,
        },
      },
    ],
  },
});
        }

    }
}

component index.js{
    class single{
const fileMiddleware = require('./middleware/file');
app.use(fileMiddleware.single('avatar'));
    }
}

database MongoDB{
}

profile <-up-> profile.hbs
profile <--> isAuthenticated
file <--> profile
profile <-right-> userSchema
userSchema <-up-> MongoDB


file -right-> single



@enduml