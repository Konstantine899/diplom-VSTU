@startuml
!define DARKGREEN
!includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml

skinparam {
  Shadowing false
  Dpi 300
  ClassAttributeFontSize 30
  ClassFontSize 30
  ComponentFontSize 30
  PackageFontSize 30
  DatabaseFontSize 30
  ComponentBackgroundColor DarkSlateGrey
}

package views{
    component orders.hbs{

    }
}

package routes{
    component orders.js{
class controller__orders{
    router.get('/', auth, async (req, res) => {
  try {
    const orders = await Order.find({ 'user.userId': req.user._id }).populate(
      'user.userId'
    );

    res.render('orders', {
      isOrder: true,
      title: 'Заказы',
      orders: orders.map((o) => {
        return {
          ...o._doc,
          price: o.courses.reduce((total, c) => {
            return (total += c.count * c.course.price);
          }, 0),
        };
      }),
    });
  } catch (e) {
    console.log(e);}
});

// создание ордера
router.post('/', auth, async (req, res) => {
  try {
    const user = await req.user.populate('cart.items.courseId').execPopulate();
    const courses = user.cart.items.map((i) => ({
      count: i.count,
      course: { ...i.courseId._doc },
    }));

    const order = new Order({
      user: {
        name: req.user.name,
        userId: req.user,
      },
      courses: courses,
    });
    await order.save();
    await req.user.clearCart();

    res.redirect('/orders');
  } catch (e) {
    console.log(e);}
});
}
    }
}
package models{
    component model__orders{
        class Order{
            const orderSchema = new Schema({
  courses: [
    {
      course: {
        type: Object,
        required: true,
      },
      count: {
        type: Number,
        required: true,
      },
    },
  ],
  user: {
    name: String,
    userId: {
      type: Schema.Types.ObjectId,
      ref: 'User',
      required: true,
    },
  },
  date: {
    type: Date,
    default: Date.now,
  },
});
        }
    }
    component user.js{
        class clearCart{
userSchema.methods.clearCart = function () {
  this.cart = { items: [] };
  return this.save();
};
        }
    }
}

package middleware{
    component auth.js{
        class isAuthenticated{
  module.exports = function (req, res, next) {
  if (!req.session.isAuthenticated) {
    return res.redirect('/auth/login');}
  next();
};
        }
    }
}



database MongoDB{

}

orders.hbs <--> controller__orders
controller__orders <-right-> Order
Order <--> clearCart
clearCart <--> MongoDB
controller__orders <--> isAuthenticated


@enduml