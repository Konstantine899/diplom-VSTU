@startuml
!define DARKGREEN
!includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml

skinparam {
    Shadowing false
    Dpi 300
    ' classFontSize 40
    ' classAttributeFontSize 35
    ' PackageFontSize 50
    ' classAttributeFontStyle "Regular"
    ' classAttributeFontName  "Gill Sans"
    ' ClassAttributeFontColor red
    ComponentBackgroundColor DarkSlateGrey
}


package views #gray{
    component add.hbs {

    }
    component courses.hbs{

    }
}

package routes #gray{
    component add.js {
    class add{
      onst { Router } = require('express');
const { validationResult } = require('express-validator');
const { courseValidators } = require('../utils/validators');
const Course = require('../models/course');
const auth = require('../middleware/auth');
....
  router.get('/', auth, (req, res) => {
  res.render('add', {
    title: 'Добавить курс',
    isAdd: true,
  });
});
....
router.post('/', auth, courseValidators, async (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(422).render('add', {
      title: 'Добавить курс',
      isAdd: true,
      error: errors.array()[0].msg,
      data: {
        title: req.body.title,
        price: req.body.price,
        img: req.body.img,
        description: req.body.description,
      },
    });}

  const course = new Course({
    title: req.body.title,
    price: req.body.price,
    img: req.body.img,
    description: req.body.description,
    userId: req.user,
  });

  try {
    await course.save();
    res.redirect('/courses');
  } catch (e) {
    console.log(e);}
});
    }
    }

    component courses.js{
class Course__find{
  router.get('/', async (req, res) => {
  try {
    const courses = await Course.find()
      .populate('userId', 'email name')
      .select('price title img');

    res.render('courses', {
      title: 'Курсы',
      isCourses: true,
      userId: req.user ? req.user._id.toString() : null,
      courses,
    });
  } catch (e) {
    console.log(e);}
});
}
    }
}

package utils #gray{
    component validator.js {
class courseValidators{
    exports.courseValidators = [
  body('title')
    .isLength({ min: 3 })
    .withMessage('Минимальная длинна названия 3 символа')
    .trim(),
  body('price').isNumeric().withMessage('Введите корректную цену'),
  body('img', 'Введите корректный url картинки').isURL(),
  body('description')
    .isLength({ min: 0 })
    .withMessage('Введите минимальное HTML описание курса'),
];
}
    }
}

package models #gray{
    component course.js {
class courseSchema{
const { Schema, model } = require('mongoose');

const courseSchema = new Schema({
  title: {
type: String,
    required: true,
  },
  price: {
    type: Number,
    required: true,
  },
  img: String,
  description: {
    type: Object,
  },
  userId: {
    type: Schema.Types.ObjectId,
    ref: 'User',
  },
});

courseSchema.method('toClient', function () {
  const course = this.toObject();
  course.id = course._id;
  delete course._id;
  return course;
});

module.exports = model('Course', courseSchema);
}
    }

}

package middleware #gray{
    component auth.js {
class isAuthenticated{
    // middleware auth.js
module.exports = function (req, res, next) {
  if (!req.session.isAuthenticated) {
    return res.redirect('/auth/login');}
  next();
};
}
    }
}

' package public{
'   component app.js{
'     class toCurrency{
'       const toCurrency = (price) => {
'   return new Intl.NumberFormat('ru-RU', {
'     currency: 'BYN',
'     style: 'currency',
'   }).format(price);
' };

'     }
'   }
' }

database MongoDB{

}

add.hbs -right-> add
add <--> courseValidators
add <--> isAuthenticated
add <-right-> courseSchema
add -left-> Course__find

courseSchema <--> MongoDB

Course__find -up-> courses.hbs
' toCurrency --> courses.hbs

' courses.hbs -[hidden]- add.hbs


@enduml