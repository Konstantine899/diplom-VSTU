@startuml
!define DARKGREEN
!includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml

skinparam {
   Shadowing false
    Dpi 300
  ClassAttributeFontSize 30
  ClassFontSize 30
  ComponentFontSize 30
  PackageFontSize 30
  DatabaseFontSize 30
  ComponentBackgroundColor DarkSlateGrey
}


package views{
component card.hbs{

}
}

component index.js{
    class entry{
        const cardRoutes = require('./routes/card');
    }
}

package routes{
    component card.js{
        class card__add{

const { Router } = require('express');
const Course = require('../models/course');
const auth = require('../middleware/auth');
const router = Router();
            ....
            
function mapCartItems(cart) {
  return cart.items.map((c) => ({
    ...c.courseId._doc,
    id: c.courseId.id,
    count: c.count,
  }));}

router.get('/', auth, async (req, res) => {
  const user = await req.user.populate('cart.items.courseId').execPopulate();

  const courses = mapCartItems(user.cart);

  res.render('card', {
    title: 'Корзина',
    isCard: true,
    courses: courses,
    price: computePrice(courses),
  });
});
router.post('/add', auth, async (req, res) => {
  try {
    const course = await Course.findById(req.body.id);
    await req.user.addToCart(course);
    res.redirect('/card');
  } catch (e) {
    console.log(e);}
});
function mapCartItems(cart) {
  return cart.items.map((c) => ({
    ...c.courseId._doc,
    id: c.courseId.id,
    count: c.count,
  }));}

function computePrice(courses) {
  return courses.reduce((total, course) => {
    return (total += course.price * course.count);
  }, 0);}
        }

    }
}

package models{
    component course.js{
        class courseSchema{
const courseSchema = new Schema({
  title: {
type: String,
    required: true,
  },
  price: {
    type: Number,
    required: true,
  },
  img: String,
  description: {
    type: Object,
  },
  userId: {
    type: Schema.Types.ObjectId,
    ref: 'User',
  },
});
        }

    }

    component user.js{
    class addToCart{
const userSchema = new Schema({
  email: {
    type: String,
    required: true,
  },
  name: String,
  password: {
    type: String,
    required: true,
  },
  avatarUrl: String,
  resetToken: String,
  resetTokenExp: Date,
  cart: {
    items: [
      {
        count: {
          type: Number,
          required: true,
          default: 1,
        },
        courseId: {
          type: Schema.Types.ObjectId,
          ref: 'Course',
          required: true,
        },
      },
    ],
  },
});

userSchema.methods.addToCart = function (course) {
  const items = [...this.cart.items];
  const idx = items.findIndex((c) => {
    return c.courseId.toString() === course._id.toString();
  });

  if (idx >= 0) {
    items[idx].count = items[idx].count + 1;
  } else {
    items.push({
      courseId: course._id,
      count: 1,
    });}

  this.cart = { items };
  return this.save();
}; 
    }
}
}

package middleware{
    component auth.js{
        class isAuthenticated{
            
 module.exports = function (req, res, next) {
  if (!req.session.isAuthenticated) {
    return res.redirect('/auth/login');}
  next();};

        }
    }
}

' package public{
'     component app.js{
'         class toCurrency{
'  const toCurrency = (price) => {
'   return new Intl.NumberFormat('ru-RU', {
'     currency: 'BYN',
'     style: 'currency',
'   }).format(price);
' };

' document.querySelectorAll('.price').forEach((node) => {
'   node.textContent = toCurrency(node.textContent);
' });
'         }
'     }
' }

database MongoDB{

}

card__add --> entry
card__add --> card.hbs
' toCurrency --> card.hbs
card__add --> isAuthenticated
addToCart <-left-> card__add
courseSchema <-> addToCart
courseSchema <-down-> MongoDB



@enduml