@startuml
!define DARKGREEN
!includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml

skinparam {
    Shadowing false
    Dpi 300
    ComponentBackgroundColor DarkSlateGrey
}

package routes{
    component card.js{
        class delete{
 router.delete('/remove/:id', auth, async (req, res) => {
  await req.user.removeFromCart(req.params.id);
  const user = await req.user.populate('cart.items.courseId').execPopulate();
  const courses = mapCartItems(user.cart);
  const cart = {
    courses,
    price: computePrice(courses),
  };
  res.status(200).json(cart);
});
        }
    }
}

package models{
    component user.js{
        class removeFromCart{
            userSchema.methods.removeFromCart = function (id) {
  let items = [...this.cart.items];
  const idx = items.findIndex((c) => c.courseId.toString() === id.toString());

  if (items[idx].count === 1) {
    items = items.filter((c) => c.courseId.toString() !== id.toString());
  } else {
    items[idx].count--;}

  this.cart = { items };
  return this.save();
};

        }
    }
    component course.js{
        class toClient{
 courseSchema.method('toClient', function () {
  const course = this.toObject();
  course.id = course._id;
  delete course._id;
  return course;
});
        }
    }
}

package views{
    component card.hbs{

    }
}

package middleware{
    component auth.js{
        class isAuthenticated{
  module.exports = function (req, res, next) {
  if (!req.session.isAuthenticated) {
    return res.redirect('/auth/login');}
  next();
};
        }
    }
}
database MongoDB{

}

card.hbs <--> delete
delete <-right-> removeFromCart
isAuthenticated <-up-> delete
removeFromCart <--> toClient
toClient <--> MongoDB

@enduml