@startuml
!define DARKGREEN
!includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml

skinparam {
    Shadowing false
    Dpi 300
    ComponentBackgroundColor DarkSlateGrey
}


package views{
    package auth{
        component password.hbs{

        }

        component login.hbs{

        }
    }
}

package routes{
    component auth.js{
        class password{
            const bcrypt = require('bcryptjs');
            const crypto = require('crypto');
....
            router.get('/password/:token', async (req, res) => {
  if (!req.params.token) {
    return res.redirect('/auth/login');}

  try {
    const user = await User.findOne({
      resetToken: req.params.token,
      resetTokenExp: { $gt: Date.now() },
    });

    if (!user) {
      return res.redirect('/auth/login');
    } else {
      res.render('auth/password', {
        title: 'Восстановить доступ',
        error: req.flash('error'),
        userId: user._id.toString(),
        token: req.params.token,
      });}
  } catch (e) {
    console.log(e);}
});

router.post('/password', async (req, res) => {
  try {
    const user = await User.findOne({
      _id: req.body.userId,
      resetToken: req.body.token,
      resetTokenExp: { $gt: Date.now() },
    });

    if (user) {
      user.password = await bcrypt.hash(req.body.password, 10);
      user.resetToken = undefined;
      user.resetTokenExp = undefined;
      await user.save();
      res.redirect('/auth/login');
    } else {
      req.flash('loginError', 'Время жизни токена истекло');
      res.redirect('/auth/login'); }
  } catch (e) {
    console.log(e);}
});
        }
    }
}

 package models{
     component user.js {
         class userSchema{
                    const userSchema = new Schema({
  email: {
    type: String,
    required: true,
  },
  name: String,
  password: {
    type: String,
    required: true,
  },
  avatarUrl: String,
  resetToken: String,
  resetTokenExp: Date,
  cart: {
    items: [
      {
        count: {
          type: Number,
          required: true,
          default: 1,
        },
        courseId: {
          type: Schema.Types.ObjectId,
          ref: 'Course',
          required: true,
        },
      },
    ],
  },
});
                }
     }
                
            }

package emails{
    component reset.js{
        class reset__email{
            module.exports = function (email, token) {
  return {
    to: email,
    from: keys.EMAIL_FROM,
    subject: 'Восстановление доступа',
    html: `<h1>Вы забыли пароль?</h1>
        <p>Если нет, то проигнорируйте данное письмо</p>
        <p>Иначе передите по ссылке</p>
        <p><a href="${keys.BASE_URL}/auth/password/${token}">Восстановление доступа</a></p>
        <hr />
        <a href="${keys.BASE_URL}">Магазин курсов</a>
        `,
  };
};
        }
    }
}

component index.js{
                class entry{
                    const authRoutes = require('./routes/auth');
                }
            }


database MongoDB{

}

entry --> password
password.hbs <--> password
login.hbs <--> password
userSchema <-left-> password
userSchema <--> MongoDB

reset__email -up-> password


@enduml