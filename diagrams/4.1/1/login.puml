@startuml
!define DARKGREEN
!includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml

skinparam {
    Shadowing false
    Dpi 300
    ' classFontSize 40
    ' classAttributeFontSize 35
    ' PackageFontSize 50
    ' classAttributeFontStyle "Regular"
    ' classAttributeFontName  "Gill Sans"
    ' ClassAttributeFontColor red
    ComponentBackgroundColor DarkSlateGrey
}

package views{
    package auth{
        component login.hbs{

        }
    }
}

package routes{
    component auth.js{
        class login{
            const User = require('../models/user');
            const bcrypt = require('bcryptjs');
            const crypto = require('crypto');
            ....
            router.get('/login', async (req, res) => {
                res.render('auth/login', {
                    title: 'Авторизация',
                    isLogin: true,
                    loginError: req.flash('loginError'),
                    registerError: req.flash('registerError'),}
                );}
            );
            ....
            router.post('/login', async (req, res) => {
                try {
                    const { email, password } = req.body;
                    const candidate = await User.findOne({ email });

                    if (candidate) {
                        {
                        const areSame = await bcrypt.compare(password, candidate.password);

                        if (areSame) {
                            {
                            req.session.user = candidate;
                            req.session.isAuthenticated = true;
                            req.session.save((err) => {
                                if (err) {
                                    {
                                    throw err;}
                                res.redirect('/');}
                            );
                            } else { else
                                {
                                req.flash('loginError', 'Неверный пароль');
                                res.redirect('/auth/login#login');}
                            } else { else
                                {
                                req.flash('loginError', 'Такого пользователя не существует');
                                res.redirect('/auth/login#login')}
                            } catch (e) {
                                catch (e) {
                                console.log(e);}}
                        );
                    }
                }
            }

            component index.js{
                class entry{
                    const authRoutes = require('./routes/auth');
                    const flash = require('connect-flash');
                    const warMiddleware = require('./middleware/variables');
                }
            }

            package models{
                component user.js{
 class userSchema{
                    const userSchema = new Schema({
  email: {
    type: String,
    required: true,
  },
  name: String,
  password: {
    type: String,
    required: true,
  },
  avatarUrl: String,
  resetToken: String,
  resetTokenExp: Date,
  cart: {
    items: [
      {
        count: {
          type: Number,
          required: true,
          default: 1,
        },
        courseId: {
          type: Schema.Types.ObjectId,
          ref: 'Course',
          required: true,
        },
      },
    ],
  },
});
                }
                }
               
            }

package middleware{
    component variables.js{
class isAuthenticated{
    // middleware variables.js
module.exports = function (req, res, next) {
  res.locals.isAuth = req.session.isAuthenticated;
  res.locals.csrf = req.csrfToken();
  next();
};
}
    }
}

database MongoDB{

}

            auth.js <--> index.js
            login.hbs <--> login
            login <-right-> userSchema
            login <-up-> isAuthenticated
            userSchema <--> MongoDB

            @enduml