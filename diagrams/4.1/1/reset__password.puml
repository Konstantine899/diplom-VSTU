@startuml
!define DARKGREEN
!includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml

skinparam {
    Shadowing false
    Dpi 300
    ComponentBackgroundColor DarkSlateGrey
}


package views{
    package auth{
        component reset.hbs{

        }
    }
}

package routes{
    component auth.js{
        class reset{
const crypto = require('crypto');
const User = require('../models/user');
const nodemailer = require('nodemailer');
const sendgrid = require('nodemailer-sendgrid-transport');
            ...
router.get('/reset', (req, res) => {
  res.render('auth/reset', {
    title: 'Забыли пароль?',
    error: req.flash('error'),
  });
});
router.post('/reset', (req, res) => {
  try {
    crypto.randomBytes(32, async (err, buffer) => {
      if (err) {
        req.flash('error', 'Что-то пошло не так, повторите попытку позже');
        return res.redirect('/auth/reset');}

      const token = buffer.toString('hex');
      const candidate = await User.findOne({ email: req.body.email });

      if (candidate) {
        candidate.resetToken = token;
        candidate.resetTokenExp = Date.now() + 60 * 60 * 1000;
        await candidate.save();
        await transporter.sendMail(resetEmail(candidate.email, token));
        res.redirect('/auth/login');
      } else {
        req.flash('error', 'Такого email нет');
        res.redirect('/auth/reset');}
    });
  } catch (e) {
    console.log(e);}
});
        }

    }
}

package models{
    component user.js{
        class userSchema{
            onst userSchema = new Schema({
  email: {
    type: String,
    required: true,
  },
  name: String,
  password: {
    type: String,
    required: true,
  },
  avatarUrl: String,
  resetToken: String,
  resetTokenExp: Date,
  cart: {
    items: [
      {
        count: {
          type: Number,
          required: true,
          default: 1,
        },
        courseId: {
          type: Schema.Types.ObjectId,
          ref: 'Course',
          required: true,
        },
      },
    ],
  },
});
        }
    }
}

package emails{
    component reset.js{
        class reset__email{
            module.exports = function (email, token) {
  return {
    to: email,
    from: keys.EMAIL_FROM,
    subject: 'Восстановление доступа',
    html: `<h1>Вы забыли пароль?</h1>
        <p>Если нет, то проигнорируйте данное письмо</p>
        <p>Иначе передите по ссылке</p>
        <p><a href="${keys.BASE_URL}/auth/password/${token}">Восстановление доступа</a></p>
        <hr />
        <a href="${keys.BASE_URL}">Магазин курсов</a>
        `,
  };
};
        }
    }
}


package keys{
  component keys.prod.js{
    class prod{
module.exports = {
  MONGODB_URI: process.env.MONGODB_URI,
  SESSION_SECRET: process.env.SESSION_SECRET,
  SENDGRID_API_KEY: process.env.SENDGRID_API_KEY,
  EMAIL_FROM: process.env.EMAIL_FROM,
  BASE_URL: process.env.BASE_URL,
};
    }
  }
  component keys.dev.js{
    class dev{
      module.exports = {
  MONGODB_URI:
    'mongodb+srv://konstantine899:M0HmjAaCApHdkHCl@cluster0-nijcz.mongodb.net/shop',
  SESSION_SECRET: 'some secret value',
  SENDGRID_API_KEY:
    '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',
  EMAIL_FROM: '375298918971@mail.ru',
  BASE_URL: 'http://localhost:3000',
};
    }
  }

  component index.js{
    class index{
      if (process.env.NODE_ENV === 'production') {
  module.exports = require('./keys.prod');
} else {
  module.exports = require('./keys.dev');

    }
  }
}





database MongoDB{

}


reset.hbs -right-> reset
reset <-right-> userSchema
userSchema <-right-> MongoDB

reset__email <-- reset 

prod --> index
dev --> index
index --> reset

@enduml