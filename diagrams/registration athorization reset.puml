@startuml
!define DARKGREEN
!includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml

skinparam {
    Shadowing false
    Dpi 300
    ' classFontSize 40
    ' classAttributeFontSize 35
    ' PackageFontSize 50
    ' classAttributeFontStyle "Regular"
    ' classAttributeFontName  "Gill Sans"
    ' ClassAttributeFontColor red

}

package "routes" #gray{
    class auth{
        ..libraries..
        express return {Router}
        bcrypt
        crypto
        express-validator return {validationResult}
        nodemailer
        nodemailer-sendgrid-transport
        ..models..
        User
        ....
        keys
        ....
        regEmail
        resetEmail
        ....
        validators return {registerValidators}

        ..function..
        nodemailer.createTransport(): return api_key
        router.get('/login'): return res.render('auth/login')
        router.get('/logout'): return req.session.destroy(): return res.redirect('/auth/login#login')
        router.post('/login'):  res.redirect('/')
        router.post('/register'): res.redirect('/auth/login#login')
        router.get('/reset'): res.render('auth/reset')
        router.get('/password/:token'): res.render('auth/password')
        router.post('/reset'): res.redirect('/auth/login')
        router.post('/password'):  res.redirect('/auth/login')
    }

}



package "models" #gray{
    class userSchema{
        ..libraries..
        mongoose: retern Schema, model
        ..userSchema..
        new Schema: return
        email: string
        name: string
        password: string
        avatarUrl: String
        resetToken: String
        resetTokenExp: Date

        cart: object
        items:array: retern
        count: number
        courseId: Schema.Types.ObjectId
        ref: Course
    }
}

package "keys" #gray{
    class dev{
        ..module..
        module.exports = object:
        MONGODB_URI
        SESSION_SECRET
        SENDGRID_API_KEY
        EMAIL_FROM
        BASE_URL
    }
    class prod{
        ..module..
        module.exports = object:
        MONGODB_URI
        SESSION_SECRET
        SENDGRID_API_KEY
        EMAIL_FROM
        BASE_URL
    }
    class index{
        process.env.NODE_ENV === 'production': return key.prod
        process.env.NODE_ENV !=== 'production': return key.dev
    }

}

dev --> index
prod --> index

package "emails" #gray{
    class registration{
        ..connecting folder..
        const keys = require('../keys')
        ..module..
        module.exports = function (email): return
        to
        from
        subject
        html
    }
    class reset{
        ..connecting folder..
        const keys = require('../keys')
        ..module..
        module.exports = function (email, token): return
        to
        from
        subject
        html
    }
}


package "utils" #gray{
    class validators{
        ..libraries..
        express-validator
        ..model..
        User
        ..function..
        body('email')
        .isEmail()
        .withMessage('Введите корректный email')

        if (user): return Promise.reject('Такой email уже занят')
            body('password', 'Пароль должен быть не менее 6 символов')
            body('confirm') : throw new Error('Пароли должны совпадать'):
        else
            true
            body('name').withMessage('Имя должно быти минимум 3 символа')

        }
    }

    ' sendingAnEmail --> auth
    ' validation -right-> auth
    ' userSchema --> registerValidators

    emails --> auth
    validators -right-> auth
    keys --> emails
    userSchema -- validators

    @enduml