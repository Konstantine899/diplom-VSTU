@startuml
!define DARKGREEN
!includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml

skinparam {
    Shadowing false
    Dpi 300
    ' classFontSize 40
    ' classAttributeFontSize 35
    ' PackageFontSize 50
    ' classAttributeFontStyle "Regular"
    ' classAttributeFontName  "Gill Sans"
    ' ClassAttributeFontColor red
}

package "routes" #gray{
    class card{
        ..libraries..
        const { Router } = require('express');
        ..models..
        Course
        ..middleware..
        auth
        ..function..
        function mapCartItems(cart)
        return cart.items.map((c) => ({})


        function computePrice(courses)
        return courses.reduce((total, course) => {}
        return (total += course.price * course.count)

        router.post('/add', auth, async (req, res) => {}
        res.redirect('/card');

        router.delete('/remove/:id', auth, async (req, res) => {}
        res.status(200).json(cart);

        router.get('/', auth, async (req, res) => {}
        const user = await req.user.populate('cart.items.courseId').execPopulate();

        const courses = mapCartItems(user.cart);

        res.render('card', {}

    }
}

package "models" #gray{
    class courseSchema{
        ..libraries..
        const { Schema, model } = require('mongoose')
        ..function..
        const courseSchema = new Schema({})
        title: string
        price: number
        img: string
        description: object
        userId: Schema.Types.ObjectId
        ref: User

        courseSchema.method('toClient')
        const course = this.toObject();
        course.id = course._id;
        delete course._id;
        return course;
    }
}
package "middleware" #gray{
    class auth{
        ..modules..
        module.exports = function (req, res, next)
        if (!req.session.isAuthenticated)
            return res.redirect('/auth/login')
        }
    }

    courseSchema --> card
    auth --> card

    @enduml