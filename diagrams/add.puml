@startuml
!define DARKGREEN
!includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml

skinparam {
    Shadowing false
    Dpi 300
    ' classFontSize 40
    ' classAttributeFontSize 35
    ' PackageFontSize 50
    ' classAttributeFontStyle "Regular"
    ' classAttributeFontName  "Gill Sans"
    ' ClassAttributeFontColor red
}

package "routes" #gray{
    class add{
        ..libraries..
        const { Router } = require('express');
        const { validationResult } = require('express-validator');
        ..models..
        Course
        ..middleware..
        auth
        ..validators..
        courseValidators
        ..function..
        router.post('/', auth, courseValidators, async ())
        const errors = validationResult(req);
        !errors.isEmpty():
        return res.status(422).render('add', {})
        const course = new Course({})
        await course.save()
        res.redirect('/courses')
    }
}
package "models" #gray{

        class courseSchema{
            ..libraries..
            const { Schema, model } = require('mongoose')
            ..function..
            const courseSchema = new Schema({})
            title: string
            price: number
            img: string
            description: object
            userId: Schema.Types.ObjectId
            ref: User

            courseSchema.method('toClient')
            const course = this.toObject();
            course.id = course._id;
            delete course._id;
            return course;
        }
    }
    package "middleware" #gray{

        class auth{
            ..module..
            module.exports = function (req, res, next)
            if (!req.session.isAuthenticated)
                return res.redirect('/auth/login');
                next();
            }
        }
        package "utils" #gray{

            class Validators{
                body('title')
                .isLength({ min: 3 })
                .withMessage('Минимальная длинна названия 3 символа')
                .trim(),
                body('price').isNumeric().withMessage('Введите корректную цену'),
                body('img', 'Введите корректный url картинки').isURL(),
                body('description')
                .isLength({ min: 0 })
                .withMessage('Введите минимальное HTML описание курса')
            }
        }


        courseSchema --> add
        middleware --> add
        Validators -left-> add

@enduml