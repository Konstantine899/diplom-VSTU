<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="9506.25px" preserveAspectRatio="none" style="width:7215px;height:9506px;background:#777777;" version="1.1" viewBox="0 0 7215 9506" width="7215.625px" zoomAndPan="magnify"><defs/><g><!--MD5=[e2a75efa8a0f57c2afae8bf75386f79c]
cluster views--><polygon fill="#808080" points="68.75,915.625,350,915.625,371.875,1052.2949,1853.125,1052.2949,1853.125,1346.875,68.75,1346.875,68.75,915.625" style="stroke: #000000; stroke-width: 4.6875;"/><line style="stroke: #000000; stroke-width: 4.6875;" x1="68.75" x2="371.875" y1="1052.2949" y2="1052.2949"/><text fill="#000000" font-family="sans-serif" font-size="93.75" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="262.5" x="81.25" y="1019.1956">views</text><!--MD5=[aee47e4adc368b23a2c75b05fcb7ca1e]
cluster routes--><polygon fill="#808080" points="909.375,2140.625,1215.625,2140.625,1237.5,2277.2949,3821.875,2277.2949,3821.875,9468.75,909.375,9468.75,909.375,2140.625" style="stroke: #000000; stroke-width: 4.6875;"/><line style="stroke: #000000; stroke-width: 4.6875;" x1="909.375" x2="1237.5" y1="2277.2949" y2="2277.2949"/><text fill="#000000" font-family="sans-serif" font-size="93.75" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="287.5" x="921.875" y="2244.1956">routes</text><!--MD5=[e5bc18234cb81ccd7dd8830c661fa314]
cluster courses.js--><rect fill="#2F4F4F" height="7053.125" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="2762.5" x="984.375" y="2340.625"/><rect fill="#2F4F4F" height="31.25" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="46.875" x="3684.375" y="2356.25"/><rect fill="#2F4F4F" height="6.25" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="12.5" x="3678.125" y="2362.5"/><rect fill="#2F4F4F" height="6.25" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="12.5" x="3678.125" y="2375"/><text fill="#FFFFFF" font-family="Verdana" font-size="93.75" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="537.5" x="2096.875" y="2475.5035">courses.js</text><!--MD5=[a60570e4b426f702ccbb0d459e3b9417]
cluster models--><polygon fill="#808080" points="3896.875,3690.625,4240.625,3690.625,4262.5,3827.2949,6271.875,3827.2949,6271.875,7918.75,3896.875,7918.75,3896.875,3690.625" style="stroke: #000000; stroke-width: 4.6875;"/><line style="stroke: #000000; stroke-width: 4.6875;" x1="3896.875" x2="4262.5" y1="3827.2949" y2="3827.2949"/><text fill="#000000" font-family="sans-serif" font-size="93.75" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="325" x="3909.375" y="3794.1956">models</text><!--MD5=[2dc90687bafe027e9cd205ba7247115e]
cluster course.js--><rect fill="#2F4F4F" height="3953.125" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="2225" x="3971.875" y="3890.625"/><rect fill="#2F4F4F" height="31.25" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="46.875" x="6134.375" y="3906.25"/><rect fill="#2F4F4F" height="6.25" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="12.5" x="6128.125" y="3912.5"/><rect fill="#2F4F4F" height="6.25" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="12.5" x="6128.125" y="3925"/><text fill="#FFFFFF" font-family="Verdana" font-size="93.75" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="481.25" x="4843.75" y="4025.5035">course.js</text><!--MD5=[c52f45833d539af9e29a9d34b8b7302b]
cluster utils--><polygon fill="#777777" points="1928.125,75,2137.5,75,2159.375,211.6699,5040.625,211.6699,5040.625,2065.625,1928.125,2065.625,1928.125,75" style="stroke: #000000; stroke-width: 4.6875;"/><line style="stroke: #000000; stroke-width: 4.6875;" x1="1928.125" x2="2159.375" y1="211.6699" y2="211.6699"/><text fill="#000000" font-family="sans-serif" font-size="93.75" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="190.625" x="1940.625" y="178.5706">utils</text><!--MD5=[e6522d51c030e97588a2f5472c734ad9]
cluster validators.js--><rect fill="#2F4F4F" height="1715.625" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="2962.5" x="2003.125" y="275"/><rect fill="#2F4F4F" height="31.25" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="46.875" x="4903.125" y="290.625"/><rect fill="#2F4F4F" height="6.25" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="12.5" x="4896.875" y="296.875"/><rect fill="#2F4F4F" height="6.25" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="12.5" x="4896.875" y="309.375"/><text fill="#FFFFFF" font-family="Verdana" font-size="93.75" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="656.25" x="3156.25" y="409.8785">validators.js</text><!--MD5=[24e2ffe3fe14b147bf8fee69b9d55bef]
cluster middleware--><polygon fill="#777777" points="5115.625,370.3125,5653.125,370.3125,5675,506.9824,7146.875,506.9824,7146.875,1770.3125,5115.625,1770.3125,5115.625,370.3125" style="stroke: #000000; stroke-width: 4.6875;"/><line style="stroke: #000000; stroke-width: 4.6875;" x1="5115.625" x2="5675" y1="506.9824" y2="506.9824"/><text fill="#000000" font-family="sans-serif" font-size="93.75" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="518.75" x="5128.125" y="473.8831">middleware</text><!--MD5=[c53328ea4eaa0e42595c7b2d43f9ecd2]
cluster auth.js--><rect fill="#2F4F4F" height="1125" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="1881.25" x="5190.625" y="570.3125"/><rect fill="#2F4F4F" height="31.25" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="46.875" x="7009.375" y="585.9375"/><rect fill="#2F4F4F" height="6.25" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="12.5" x="7003.125" y="592.1875"/><rect fill="#2F4F4F" height="6.25" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="12.5" x="7003.125" y="604.6875"/><text fill="#FFFFFF" font-family="Verdana" font-size="93.75" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="365.625" x="5948.4375" y="705.191">auth.js</text><!--MD5=[6f24bd06707e028cf1a730ba98cde05a]
entity course_edit.hbs--><rect fill="#2F4F4F" height="207.6874" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="881.25" x="118.75" y="1090.625"/><rect fill="#2F4F4F" height="31.25" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="46.875" x="937.5" y="1106.25"/><rect fill="#2F4F4F" height="6.25" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="12.5" x="931.25" y="1112.5"/><rect fill="#2F4F4F" height="6.25" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="12.5" x="931.25" y="1125"/><text fill="#FFFFFF" font-family="Verdana" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="756.25" x="165.625" y="1247.3785">course_edit.hbs</text><!--MD5=[1e75b17258914e3d4cd4c14a609d2929]
entity courses.hbs--><rect fill="#2F4F4F" height="207.6874" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="690.625" x="1110.9375" y="1090.625"/><rect fill="#2F4F4F" height="31.25" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="46.875" x="1739.0625" y="1106.25"/><rect fill="#2F4F4F" height="6.25" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="12.5" x="1732.8125" y="1112.5"/><rect fill="#2F4F4F" height="6.25" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="12.5" x="1732.8125" y="1125"/><text fill="#FFFFFF" font-family="Verdana" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="565.625" x="1157.8125" y="1247.3785">courses.hbs</text><!--MD5=[674618ee3c9b4f912c1c7c36b72a13e5]
class edit--><rect fill="#2E2E2E" height="6829.953" id="edit" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="2662.5" x="1034.375" y="2512.5"/><ellipse cx="2264.0625" cy="2585.0937" fill="#228811" rx="25" ry="25" style="stroke: #1B1B1B; stroke-width: 3.125;"/><path d="M2266.0645,2598.082 Q2263.2813,2598.082 2260.9131,2597.2519 Q2258.5449,2596.4218 2256.8359,2594.8105 Q2255.1758,2593.1992 2254.2236,2590.7578 Q2253.2715,2588.3163 2253.2715,2585.1425 Q2253.2715,2582.164 2254.1748,2579.747 Q2255.0781,2577.33 2256.7871,2575.5722 Q2258.3984,2573.912 2260.8154,2573.0087 Q2263.2324,2572.1054 2266.0645,2572.1054 Q2267.627,2572.1054 2268.8965,2572.2763 Q2270.166,2572.4472 2271.2402,2572.7402 Q2272.3633,2573.082 2273.291,2573.4726 Q2274.2188,2573.8632 2274.9023,2574.205 L2274.9023,2580.2597 L2274.1699,2580.2597 Q2273.6816,2579.8691 2272.9736,2579.3076 Q2272.2656,2578.746 2271.3379,2578.2089 Q2270.4102,2577.6718 2269.3359,2577.3056 Q2268.2617,2576.9394 2267.041,2576.9394 Q2265.6738,2576.9394 2264.4531,2577.3544 Q2263.2324,2577.7695 2262.207,2578.7949 Q2261.2305,2579.7226 2260.6201,2581.3095 Q2260.0098,2582.8964 2260.0098,2585.1425 Q2260.0098,2587.4863 2260.6689,2589.0732 Q2261.3281,2590.6601 2262.3047,2591.539 Q2263.3301,2592.4667 2264.5996,2592.8574 Q2265.8691,2593.248 2267.0898,2593.248 Q2268.2617,2593.248 2269.4092,2592.9062 Q2270.5566,2592.5644 2271.5332,2591.9296 Q2272.3633,2591.4902 2273.0713,2590.9286 Q2273.7793,2590.3671 2274.2188,2589.9765 L2274.9023,2589.9765 L2274.9023,2595.9335 Q2273.9746,2596.373 2273.1201,2596.7392 Q2272.2656,2597.1054 2271.2891,2597.3495 Q2270.0684,2597.6913 2268.9941,2597.8867 Q2267.9199,2598.082 2266.0645,2598.082 Z "/><text fill="#FFFFFF" font-family="Verdana" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="181.25" x="2314.0625" y="2622.3785">edit</text><line style="stroke: #1B1B1B; stroke-width: 4.6875;" x1="1037.5" x2="3693.75" y1="2657.6874" y2="2657.6874"/><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="1481.25" x="1053.125" y="2767.5079">const { Router } = require('express');</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="2243.75" x="1053.125" y="2885.4279">const { validationResult } = require('express-validator');</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="2234.375" x="1053.125" y="3003.3478">const { courseValidators } = require('../utils/validators');</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="1746.875" x="1053.125" y="3121.2677">const Course = require('../models/course');</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="1706.25" x="1053.125" y="3239.1876">const auth = require('../middleware/auth');</text><line style="stroke: #1B1B1B; stroke-width: 3.125; stroke-dasharray: 1.0,2.0;" x1="1037.5" x2="3693.75" y1="3272.287" y2="3272.287"/><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="1375" x="1053.125" y="3382.1075">router.get('/', async (req, res) =&gt; {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="159.375" x="1053.125" y="3500.0275">try {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="1456.25" x="1053.125" y="3617.9474">const courses = await Course.find()</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="1303.125" x="1053.125" y="3735.8673">.populate('userId', 'email name')</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="940.625" x="1053.125" y="3853.7872">.select('price title img');</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="0" x="1078.125" y="3971.7072"/><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="896.875" x="1053.125" y="4089.6271">res.render('courses', {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="525" x="1053.125" y="4207.547">title: 'Курсы',</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="650" x="1053.125" y="4325.4669">isCourses: true,</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="1903.125" x="1053.125" y="4443.3868">userId: req.user ? req.user._id.toString() : null,</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="350" x="1053.125" y="4561.3068">courses,</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="87.5" x="1053.125" y="4679.2267">});</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="471.875" x="1053.125" y="4797.1466">} catch (e) {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="637.5" x="1053.125" y="4915.0665">console.log(e);}</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="87.5" x="1053.125" y="5032.9865">});</text><line style="stroke: #1B1B1B; stroke-width: 3.125; stroke-dasharray: 1.0,2.0;" x1="1053.125" x2="1084.375" y1="5069.2108" y2="5069.2108"/><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="1881.25" x="1053.125" y="5182.1564">router.get('/:id/edit', auth, async (req, res) =&gt; {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="846.875" x="1053.125" y="5300.0763">if (!req.query.allow) {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="912.5" x="1053.125" y="5417.9962">return res.redirect('/');}</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="0" x="1078.125" y="5535.9161"/><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="159.375" x="1053.125" y="5653.8361">try {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="2187.5" x="1053.125" y="5771.756">const course = await Course.findById(req.params.id);</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="1084.375" x="1053.125" y="5889.6759">if (!isOwner(course, req)) {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="1237.5" x="1053.125" y="6007.5958">return res.redirect('/courses');}</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="0" x="1078.125" y="6125.5157"/><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="1031.25" x="1053.125" y="6243.4357">res.render('course-edit', {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="1518.75" x="1053.125" y="6361.3556">title: `Редактировать ${course.title}`,</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="303.125" x="1053.125" y="6479.2755">course,</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="87.5" x="1053.125" y="6597.1954">});</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="471.875" x="1053.125" y="6715.1154">} catch (e) {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="637.5" x="1053.125" y="6833.0353">console.log(e);}</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="87.5" x="1053.125" y="6950.9552">});</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="0" x="1078.125" y="7068.8751"/><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="2540.625" x="1053.125" y="7186.795">router.post('/edit', auth, courseValidators, async (req, res) =&gt; {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="1475" x="1053.125" y="7304.715">const errors = validationResult(req);</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="928.125" x="1053.125" y="7422.6349">const { id } = req.body;</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="0" x="1078.125" y="7540.5548"/><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="881.25" x="1053.125" y="7658.4747">if (!errors.isEmpty()) {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="2625" x="1053.125" y="7776.3947">return res.status(422).redirect(`/courses/${id}/edit?allow=true`);}</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="0" x="1078.125" y="7894.3146"/><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="159.375" x="1053.125" y="8012.2345">try {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="762.5" x="1053.125" y="8130.1544">delete req.body.id;</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="1693.75" x="1053.125" y="8248.0743">const course = await Course.findById(id);</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="1084.375" x="1053.125" y="8365.9943">if (!isOwner(course, req)) {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="1237.5" x="1053.125" y="8483.9142">return res.redirect('/courses');}</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="1343.75" x="1053.125" y="8601.8341">Object.assign(course, req.body);</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="821.875" x="1053.125" y="8719.754">await course.save();</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="937.5" x="1053.125" y="8837.674">res.redirect('/courses');</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="471.875" x="1053.125" y="8955.5939">} catch (e) {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="637.5" x="1053.125" y="9073.5138">console.log(e);}</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="87.5" x="1053.125" y="9191.4337">});</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="0" x="1078.125" y="9309.3536"/><!--MD5=[3c8afb8c3a917f644ec1ad74ecd38fae]
class courseSchema--><rect fill="#2E2E2E" height="3732.785" id="courseSchema" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="2121.875" x="4023.4375" y="4062.5"/><ellipse cx="4728.125" cy="4135.0937" fill="#228811" rx="25" ry="25" style="stroke: #1B1B1B; stroke-width: 3.125;"/><path d="M4730.127,4148.082 Q4727.3438,4148.082 4724.9756,4147.2519 Q4722.6074,4146.4218 4720.8984,4144.8105 Q4719.2383,4143.1992 4718.2861,4140.7578 Q4717.334,4138.3163 4717.334,4135.1425 Q4717.334,4132.164 4718.2373,4129.747 Q4719.1406,4127.33 4720.8496,4125.5722 Q4722.4609,4123.912 4724.8779,4123.0087 Q4727.2949,4122.1054 4730.127,4122.1054 Q4731.6895,4122.1054 4732.959,4122.2763 Q4734.2285,4122.4472 4735.3027,4122.7402 Q4736.4258,4123.082 4737.3535,4123.4726 Q4738.2813,4123.8632 4738.9648,4124.205 L4738.9648,4130.2597 L4738.2324,4130.2597 Q4737.7441,4129.8691 4737.0361,4129.3076 Q4736.3281,4128.746 4735.4004,4128.2089 Q4734.4727,4127.6718 4733.3984,4127.3056 Q4732.3242,4126.9394 4731.1035,4126.9394 Q4729.7363,4126.9394 4728.5156,4127.3544 Q4727.2949,4127.7695 4726.2695,4128.7949 Q4725.293,4129.7226 4724.6826,4131.3095 Q4724.0723,4132.8964 4724.0723,4135.1425 Q4724.0723,4137.4863 4724.7314,4139.0732 Q4725.3906,4140.6601 4726.3672,4141.539 Q4727.3926,4142.4667 4728.6621,4142.8574 Q4729.9316,4143.248 4731.1523,4143.248 Q4732.3242,4143.248 4733.4717,4142.9062 Q4734.6191,4142.5644 4735.5957,4141.9296 Q4736.4258,4141.4902 4737.1338,4140.9286 Q4737.8418,4140.3671 4738.2813,4139.9765 L4738.9648,4139.9765 L4738.9648,4145.9335 Q4738.0371,4146.373 4737.1826,4146.7392 Q4736.3281,4147.1054 4735.3516,4147.3495 Q4734.1309,4147.6913 4733.0566,4147.8867 Q4731.9824,4148.082 4730.127,4148.082 Z "/><text fill="#FFFFFF" font-family="Verdana" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="690.625" x="4778.125" y="4172.3785">courseSchema</text><line style="stroke: #1B1B1B; stroke-width: 4.6875;" x1="4026.5625" x2="6142.1875" y1="4207.6874" y2="4207.6874"/><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="225" x="4042.1875" y="4317.5079">title: {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="496.875" x="4042.1875" y="4435.4279">type: String,</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="578.125" x="4042.1875" y="4553.3478">required: true,</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="56.25" x="4042.1875" y="4671.2677">},</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="284.375" x="4042.1875" y="4789.1876">price: {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="584.375" x="4042.1875" y="4907.1075">type: Number,</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="578.125" x="4042.1875" y="5025.0275">required: true,</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="56.25" x="4042.1875" y="5142.9474">},</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="475" x="4042.1875" y="5260.8673">img: String,</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="534.375" x="4042.1875" y="5378.7872">description: {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="518.75" x="4042.1875" y="5496.7072">type: Object,</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="56.25" x="4042.1875" y="5614.6271">},</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="337.5" x="4042.1875" y="5732.547">userId: {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="1240.625" x="4042.1875" y="5850.4669">type: Schema.Types.ObjectId,</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="415.625" x="4042.1875" y="5968.3868">ref: 'User',</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="56.25" x="4042.1875" y="6086.3068">},</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="0" x="4067.1875" y="6204.2267"/><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="940.625" x="4042.1875" y="6322.1466">course.id = course._id;</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="731.25" x="4042.1875" y="6440.0665">delete course._id;</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="571.875" x="4042.1875" y="6557.9865">return course;</text><line style="stroke: #1B1B1B; stroke-width: 4.6875;" x1="4026.5625" x2="6142.1875" y1="6591.0858" y2="6591.0858"/><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="1956.25" x="4042.1875" y="6700.9064">const { Schema, model } = require('mongoose');</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="0" x="4067.1875" y="6818.8263"/><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="1568.75" x="4042.1875" y="6936.7462">const courseSchema = new Schema({</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="87.5" x="4042.1875" y="7054.6661">});</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="0" x="4067.1875" y="7172.5861"/><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="1859.375" x="4042.1875" y="7290.506">courseSchema.method('toClient', function () {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="1234.375" x="4042.1875" y="7408.4259">const course = this.toObject();</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="87.5" x="4042.1875" y="7526.3458">});</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="0" x="4067.1875" y="7644.2657"/><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="2084.375" x="4042.1875" y="7762.1857">module.exports = model('Course', courseSchema);</text><!--MD5=[5e89e6e7e30ba36a0ec196a15f2a17b3]
class courseValidators--><rect fill="#2E2E2E" height="1492.3065" id="courseValidators" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="2859.375" x="2054.6875" y="446.875"/><ellipse cx="3078.125" cy="519.4687" fill="#228811" rx="25" ry="25" style="stroke: #1B1B1B; stroke-width: 3.125;"/><path d="M3080.127,532.457 Q3077.3438,532.457 3074.9756,531.6269 Q3072.6074,530.7968 3070.8984,529.1855 Q3069.2383,527.5742 3068.2861,525.1328 Q3067.334,522.6913 3067.334,519.5175 Q3067.334,516.539 3068.2373,514.122 Q3069.1406,511.705 3070.8496,509.9472 Q3072.4609,508.287 3074.8779,507.3837 Q3077.2949,506.4804 3080.127,506.4804 Q3081.6895,506.4804 3082.959,506.6513 Q3084.2285,506.8222 3085.3027,507.1152 Q3086.4258,507.457 3087.3535,507.8476 Q3088.2813,508.2382 3088.9648,508.58 L3088.9648,514.6347 L3088.2324,514.6347 Q3087.7441,514.2441 3087.0361,513.6826 Q3086.3281,513.121 3085.4004,512.5839 Q3084.4727,512.0468 3083.3984,511.6806 Q3082.3242,511.3144 3081.1035,511.3144 Q3079.7363,511.3144 3078.5156,511.7294 Q3077.2949,512.1445 3076.2695,513.1699 Q3075.293,514.0976 3074.6826,515.6845 Q3074.0723,517.2714 3074.0723,519.5175 Q3074.0723,521.8613 3074.7314,523.4482 Q3075.3906,525.0351 3076.3672,525.914 Q3077.3926,526.8417 3078.6621,527.2324 Q3079.9316,527.623 3081.1523,527.623 Q3082.3242,527.623 3083.4717,527.2812 Q3084.6191,526.9394 3085.5957,526.3046 Q3086.4258,525.8652 3087.1338,525.3036 Q3087.8418,524.7421 3088.2813,524.3515 L3088.9648,524.3515 L3088.9648,530.3085 Q3088.0371,530.748 3087.1826,531.1142 Q3086.3281,531.4804 3085.3516,531.7245 Q3084.1309,532.0663 3083.0566,532.2617 Q3081.9824,532.457 3080.127,532.457 Z "/><text fill="#FFFFFF" font-family="Verdana" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="790.625" x="3128.125" y="556.7535">courseValidators</text><line style="stroke: #1B1B1B; stroke-width: 4.6875;" x1="2057.8125" x2="4910.9375" y1="592.0624" y2="592.0624"/><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="1143.75" x="2073.4375" y="701.8829">exports.courseValidators = [</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="50" x="2073.4375" y="819.8029">];</text><line style="stroke: #1B1B1B; stroke-width: 4.6875;" x1="2057.8125" x2="4910.9375" y1="852.9022" y2="852.9022"/><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="446.875" x="2073.4375" y="962.7228">body('title')</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="812.5" x="2073.4375" y="1080.6427">.isLength({ min: 3 })</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="2521.875" x="2073.4375" y="1198.5626">.withMessage('Минимальная длинна названия 3 символа')</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="268.75" x="2073.4375" y="1316.4825">.trim(),</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="2821.875" x="2073.4375" y="1434.4025">body('price').isNumeric().withMessage('Введите корректную цену'),</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="2353.125" x="2073.4375" y="1552.3224">body('img', 'Введите корректный url картинки').isURL(),</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="756.25" x="2073.4375" y="1670.2423">body('description')</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="812.5" x="2073.4375" y="1788.1622">.isLength({ min: 0 })</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="2656.25" x="2073.4375" y="1906.0822">.withMessage('Введите минимальное HTML описание курса'),</text><!--MD5=[bda47d503442ff4a0d0fa4aec41fe8fa]
class isAuthenticated--><rect fill="#2E2E2E" height="902.7069" id="isAuthenticated" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="1781.25" x="5240.625" y="742.1875"/><ellipse cx="5750" cy="814.7812" fill="#228811" rx="25" ry="25" style="stroke: #1B1B1B; stroke-width: 3.125;"/><path d="M5752.002,827.7695 Q5749.2188,827.7695 5746.8506,826.9394 Q5744.4824,826.1093 5742.7734,824.498 Q5741.1133,822.8867 5740.1611,820.4453 Q5739.209,818.0038 5739.209,814.83 Q5739.209,811.8515 5740.1123,809.4345 Q5741.0156,807.0175 5742.7246,805.2597 Q5744.3359,803.5995 5746.7529,802.6962 Q5749.1699,801.7929 5752.002,801.7929 Q5753.5645,801.7929 5754.834,801.9638 Q5756.1035,802.1347 5757.1777,802.4277 Q5758.3008,802.7695 5759.2285,803.1601 Q5760.1563,803.5507 5760.8398,803.8925 L5760.8398,809.9472 L5760.1074,809.9472 Q5759.6191,809.5566 5758.9111,808.9951 Q5758.2031,808.4335 5757.2754,807.8964 Q5756.3477,807.3593 5755.2734,806.9931 Q5754.1992,806.6269 5752.9785,806.6269 Q5751.6113,806.6269 5750.3906,807.0419 Q5749.1699,807.457 5748.1445,808.4824 Q5747.168,809.4101 5746.5576,810.997 Q5745.9473,812.5839 5745.9473,814.83 Q5745.9473,817.1738 5746.6064,818.7607 Q5747.2656,820.3476 5748.2422,821.2265 Q5749.2676,822.1542 5750.5371,822.5449 Q5751.8066,822.9355 5753.0273,822.9355 Q5754.1992,822.9355 5755.3467,822.5937 Q5756.4941,822.2519 5757.4707,821.6171 Q5758.3008,821.1777 5759.0088,820.6161 Q5759.7168,820.0546 5760.1563,819.664 L5760.8398,819.664 L5760.8398,825.621 Q5759.9121,826.0605 5759.0576,826.4267 Q5758.2031,826.7929 5757.2266,827.037 Q5756.0059,827.3788 5754.9316,827.5742 Q5753.8574,827.7695 5752.002,827.7695 Z "/><text fill="#FFFFFF" font-family="Verdana" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="740.625" x="5800" y="852.066">isAuthenticated</text><line style="stroke: #1B1B1B; stroke-width: 4.6875;" x1="5243.75" x2="7018.75" y1="887.3749" y2="887.3749"/><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="850" x="5259.375" y="997.1954">// middleware auth.js</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="56.25" x="5259.375" y="1115.1154">};</text><line style="stroke: #1B1B1B; stroke-width: 4.6875;" x1="5243.75" x2="7018.75" y1="1148.2147" y2="1148.2147"/><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="1743.75" x="5259.375" y="1258.0353">module.exports = function (req, res, next) {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="1353.125" x="5259.375" y="1375.9552">if (!req.session.isAuthenticated) {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="1318.75" x="5259.375" y="1493.8751">return res.redirect('/auth/login');}</text><text fill="#AAAAAA" font-family="sans-serif" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="259.375" x="5259.375" y="1611.795">next();</text><!--MD5=[ba72416187da2a396e219ea5b5d73a26]
entity MongoDB--><path d="M6323.4375,5857.8125 C6323.4375,5826.5625 6578.125,5826.5625 6578.125,5826.5625 C6578.125,5826.5625 6832.8125,5826.5625 6832.8125,5857.8125 L6832.8125,5999.8749 C6832.8125,6031.1249 6578.125,6031.1249 6578.125,6031.1249 C6578.125,6031.1249 6323.4375,6031.1249 6323.4375,5999.8749 L6323.4375,5857.8125 " fill="#2E2E2E" style="stroke: #1B1B1B; stroke-width: 4.6875;"/><path d="M6323.4375,5857.8125 C6323.4375,5889.0625 6578.125,5889.0625 6578.125,5889.0625 C6578.125,5889.0625 6832.8125,5889.0625 6832.8125,5857.8125 " fill="none" style="stroke: #1B1B1B; stroke-width: 4.6875;"/><text fill="#FFFFFF" font-family="Verdana" font-size="93.75" lengthAdjust="spacingAndGlyphs" textLength="446.875" x="6354.6875" y="5995.816">MongoDB</text><!--MD5=[846178dcffc9c326559a8d6cc3394a4c]
link course_edit.hbs to edit--><path d="M603.8188,1313.2188 C680.8125,1514.75 850.6188,1959.25 1055.8344,2496.4375 " fill="none" id="course_edit.hbs-edit" style="stroke: #FFFFFF; stroke-width: 3.125;"/><polygon fill="#FFFFFF" points="1061.6063,2511.5313,1063.2398,2480.797,1056.0271,2496.9363,1039.8878,2489.7236,1061.6063,2511.5313" style="stroke: #FFFFFF; stroke-width: 3.125;"/><polygon fill="#FFFFFF" points="597.9375,1297.8125,596.3039,1328.5468,603.5166,1312.4075,619.6559,1319.6202,597.9375,1297.8125" style="stroke: #FFFFFF; stroke-width: 3.125;"/><!--MD5=[f1e83e3caf1a9e59760a08b90bf8918d]
reverse link courses.hbs to edit--><path d="M1478.625,1313.2188 C1517.7531,1516.6562 1604.4844,1967.5938 1709.1031,2511.5313 " fill="none" id="courses.hbs&lt;-edit" style="stroke: #FFFFFF; stroke-width: 3.125;"/><polygon fill="#FFFFFF" points="1475.6656,1297.8125,1468.6938,1327.7901,1478.6122,1313.1571,1493.2452,1323.0756,1475.6656,1297.8125" style="stroke: #FFFFFF; stroke-width: 3.125;"/><!--MD5=[957182f0dbd2f7b64203e75f25995bc9]
link edit to courseSchema--><path d="M3713.625,5928.125 C3811.2812,5928.125 3908.9375,5928.125 4006.5937,5928.125 " fill="none" id="edit-courseSchema" style="stroke: #FFFFFF; stroke-width: 3.125;"/><polygon fill="#FFFFFF" points="4022.25,5928.125,3994.125,5915.625,4006.625,5928.125,3994.125,5940.625,4022.25,5928.125" style="stroke: #FFFFFF; stroke-width: 3.125;"/><polygon fill="#FFFFFF" points="3697.125,5928.125,3725.25,5940.625,3712.75,5928.125,3725.25,5915.625,3697.125,5928.125" style="stroke: #FFFFFF; stroke-width: 3.125;"/><!--MD5=[15ab8eb559fe119814b44df5b29eb662]
link courseSchema to MongoDB--><path d="M6162.875,5928.125 C6210.6875,5928.125 6258.5313,5928.125 6306.375,5928.125 " fill="none" id="courseSchema-MongoDB" style="stroke: #FFFFFF; stroke-width: 3.125;"/><polygon fill="#FFFFFF" points="6322.5938,5928.125,6294.4688,5915.625,6306.9688,5928.125,6294.4688,5940.625,6322.5938,5928.125" style="stroke: #FFFFFF; stroke-width: 3.125;"/><polygon fill="#FFFFFF" points="6146.3438,5928.125,6174.4688,5940.625,6161.9688,5928.125,6174.4688,5915.625,6146.3438,5928.125" style="stroke: #FFFFFF; stroke-width: 3.125;"/><!--MD5=[ee0ddd2813fae9ba241a22825c95ea45]
link courseValidators to edit--><path d="M3304.5313,1956.9688 C3265.9375,2120 3222.8125,2302.2813 3176.8125,2496.7187 " fill="none" id="courseValidators-edit" style="stroke: #FFFFFF; stroke-width: 3.125;"/><polygon fill="#FFFFFF" points="3173.2188,2511.9375,3191.8964,2487.4751,3176.8398,2496.7379,3167.577,2481.6813,3173.2188,2511.9375" style="stroke: #FFFFFF; stroke-width: 3.125;"/><polygon fill="#FFFFFF" points="3308.3438,1940.8438,3289.6823,1965.3185,3304.7327,1956.0458,3314.0055,1971.0962,3308.3438,1940.8438" style="stroke: #FFFFFF; stroke-width: 3.125;"/><!--MD5=[fe6bb6d9b44957853f568bd36ee8c9ce]
link isAuthenticated to edit--><path d="M5671.3125,1657.3437 C5471.6563,1826.625 5224.4375,1999.1875 4965.625,2090.625 C4913.5625,2109.0312 4017.5,2084.5 3971.875,2115.625 C3810.375,2225.75 3665.0625,2355.5625 3534.3125,2499.5937 " fill="none" id="isAuthenticated-edit" style="stroke: #FFFFFF; stroke-width: 3.125;"/><polygon fill="#FFFFFF" points="3523.3125,2511.7813,3551.4183,2499.2382,3533.7651,2500.1673,3532.836,2482.514,3523.3125,2511.7813" style="stroke: #FFFFFF; stroke-width: 3.125;"/><polygon fill="#FFFFFF" points="5684.375,1646.2188,5654.867,1654.9675,5672.4896,1656.3616,5671.0955,1673.9842,5684.375,1646.2188" style="stroke: #FFFFFF; stroke-width: 3.125;"/><!--MD5=[82ce569f0176de50322648fb0491a7d1]
@startuml
!define DARKGREEN
!includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml

skinparam {
    Shadowing false
    Dpi 300
  ClassAttributeFontSize 30
  ClassFontSize 30
  ComponentFontSize 30
  PackageFontSize 30
  DatabaseFontSize 30
  ComponentBackgroundColor DarkSlateGrey
}

package views #gray{
    component course_edit.hbs {

    }
    component courses.hbs{

    }
}

package routes #gray{
    component courses.js {
    class edit{
      const { Router } = require('express');
const { validationResult } = require('express-validator');
const { courseValidators } = require('../utils/validators');
const Course = require('../models/course');
const auth = require('../middleware/auth');
....
        router.get('/', async (req, res) => {
  try {
    const courses = await Course.find()
      .populate('userId', 'email name')
      .select('price title img');

    res.render('courses', {
      title: 'Курсы',
      isCourses: true,
      userId: req.user ? req.user._id.toString() : null,
      courses,
    });
  } catch (e) {
    console.log(e);}
});
        ....
        router.get('/:id/edit', auth, async (req, res) => {
  if (!req.query.allow) {
    return res.redirect('/');}

  try {
    const course = await Course.findById(req.params.id);
    if (!isOwner(course, req)) {
      return res.redirect('/courses');}

    res.render('course-edit', {
      title: `Редактировать ${course.title}`,
      course,
    });
  } catch (e) {
    console.log(e);}
});

router.post('/edit', auth, courseValidators, async (req, res) => {
  const errors = validationResult(req);
  const { id } = req.body;

  if (!errors.isEmpty()) {
    return res.status(422).redirect(`/courses/${id}/edit?allow=true`);}

  try {
    delete req.body.id;
    const course = await Course.findById(id);
    if (!isOwner(course, req)) {
      return res.redirect('/courses');}
    Object.assign(course, req.body);
    await course.save();
    res.redirect('/courses');
  } catch (e) {
    console.log(e);}
});
       
}
    }
}



package models #gray{
    component course.js {
class courseSchema{
const { Schema, model } = require('mongoose');

const courseSchema = new Schema({
  title: {
type: String,
    required: true,
  },
  price: {
    type: Number,
    required: true,
  },
  img: String,
  description: {
    type: Object,
  },
  userId: {
    type: Schema.Types.ObjectId,
    ref: 'User',
  },
});

courseSchema.method('toClient', function () {
  const course = this.toObject();
  course.id = course._id;
  delete course._id;
  return course;
});

module.exports = model('Course', courseSchema);
}
    }

}

package utils{
  component validators.js{
    class courseValidators{
      exports.courseValidators = [
  body('title')
    .isLength({ min: 3 })
    .withMessage('Минимальная длинна названия 3 символа')
    .trim(),
  body('price').isNumeric().withMessage('Введите корректную цену'),
  body('img', 'Введите корректный url картинки').isURL(),
  body('description')
    .isLength({ min: 0 })
    .withMessage('Введите минимальное HTML описание курса'),
];
    }
  }
}

package middleware{
  component auth.js{
    class isAuthenticated{
      // middleware auth.js
module.exports = function (req, res, next) {
  if (!req.session.isAuthenticated) {
    return res.redirect('/auth/login');}
  next();
};

    }
  }
}

' package public{
'   component app.js{
'     class toCurrency{
'       const toCurrency = (price) => {
'   return new Intl.NumberFormat('ru-RU', {
'     currency: 'BYN',
'     style: 'currency',
'   }).format(price);
' };

'     }
'   }
' }



database MongoDB{

}

course_edit.hbs <- -> edit
edit -up-> courses.hbs
' toCurrency -left-> courses.hbs
edit <-right-> courseSchema
courseSchema <-> MongoDB


courseValidators <-down-> edit
isAuthenticated <-down-> edit


@enduml

@startuml







skinparam stereotypeCBackgroundColor 228811





skinparam backgroundColor 777







skinparam circledCharacter {
  radius 8
  fontSize 11
  fontName Verdana
}

skinparam class {
    backgroundColor 2e2e2e
  borderColor 1b1b1b
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
    arrowColor fff
  arrowFontName Verdana
  arrowFontColor bbb
  arrowFontSize 11

  attributeFontColor aaa
  attributeFontSize 11
  attributeIconSize 11
}


skinparam actor {
    backgroundColor 228811
  borderColor 113300
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
}

skinparam participant {
    backgroundColor 2e2e2e
  borderColor 1b1b1b
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
}

skinparam collections {
    backgroundColor 2e2e2e
  borderColor 1b1b1b
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
}

skinparam SequenceBox{
    backgroundColor 575757
  borderColor 767676
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
}


skinparam interface {
    backgroundColor 228811
  borderColor 113300
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
}

skinparam component {
    backgroundColor 2e2e2e
  borderColor 1b1b1b
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
}

skinparam node {
    backgroundColor 2e2e2e
  borderColor 1b1b1b
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
}

skinparam database {
    backgroundColor 2e2e2e
  borderColor 1b1b1b
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
}

skinparam queue {
    backgroundColor 2e2e2e
  borderColor 1b1b1b
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
}


skinparam usecase {
    backgroundColor 2e2e2e
  borderColor 1b1b1b
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
    arrowColor fff
  arrowFontName Verdana
  arrowFontColor bbb
  arrowFontSize 11
}

skinparam activity {
    backgroundColor 2e2e2e
  borderColor 1b1b1b
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
    arrowColor fff
  arrowFontName Verdana
  arrowFontColor bbb
  arrowFontSize 11
}

skinparam sequence {
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
    arrowColor fff
  arrowFontName Verdana
  arrowFontColor bbb
  arrowFontSize 11

  lifeLineBorderColor 228811
  lifeLineBackgroundColor 575757
}

skinparam boundary {
    backgroundColor 228811
  borderColor 113300
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
}

skinparam control {
    backgroundColor 228811
  borderColor 113300
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
}

skinparam entity {
    backgroundColor 228811
  borderColor 113300
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
}


skinparam state {
    backgroundColor 2e2e2e
  borderColor 1b1b1b
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
    arrowColor fff
  arrowFontName Verdana
  arrowFontColor bbb
  arrowFontSize 11
  startColor 228811
  endColor 113300
}


skinparam object {
    backgroundColor 2e2e2e
  borderColor 1b1b1b
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
    arrowColor fff
  arrowFontName Verdana
  arrowFontColor bbb
  arrowFontSize 11
}


skinparam note {
    backgroundColor 228811
  borderColor 113300
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
}

skinparam cloud {
    backgroundColor 2e2e2e
  borderColor 1b1b1b
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
    arrowColor fff
  arrowFontName Verdana
  arrowFontColor bbb
  arrowFontSize 11
}

skinparam rectangle {
    backgroundColor 2e2e2e
  borderColor 1b1b1b
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
}

skinparam storage {
    backgroundColor 2e2e2e
  borderColor 1b1b1b
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
}


skinparam {
    Shadowing false
    Dpi 300
  ClassAttributeFontSize 30
  ClassFontSize 30
  ComponentFontSize 30
  PackageFontSize 30
  DatabaseFontSize 30
  ComponentBackgroundColor DarkSlateGrey
}

package views #gray{
    component course_edit.hbs {

    }
    component courses.hbs{

    }
}

package routes #gray{
    component courses.js {
    class edit{
      const { Router } = require('express');
const { validationResult } = require('express-validator');
const { courseValidators } = require('../utils/validators');
const Course = require('../models/course');
const auth = require('../middleware/auth');
....
        router.get('/', async (req, res) => {
  try {
    const courses = await Course.find()
      .populate('userId', 'email name')
      .select('price title img');

    res.render('courses', {
      title: 'Курсы',
      isCourses: true,
      userId: req.user ? req.user._id.toString() : null,
      courses,
    });
  } catch (e) {
    console.log(e);}
});
        ....
        router.get('/:id/edit', auth, async (req, res) => {
  if (!req.query.allow) {
    return res.redirect('/');}

  try {
    const course = await Course.findById(req.params.id);
    if (!isOwner(course, req)) {
      return res.redirect('/courses');}

    res.render('course-edit', {
      title: `Редактировать ${course.title}`,
      course,
    });
  } catch (e) {
    console.log(e);}
});

router.post('/edit', auth, courseValidators, async (req, res) => {
  const errors = validationResult(req);
  const { id } = req.body;

  if (!errors.isEmpty()) {
    return res.status(422).redirect(`/courses/${id}/edit?allow=true`);}

  try {
    delete req.body.id;
    const course = await Course.findById(id);
    if (!isOwner(course, req)) {
      return res.redirect('/courses');}
    Object.assign(course, req.body);
    await course.save();
    res.redirect('/courses');
  } catch (e) {
    console.log(e);}
});
       
}
    }
}



package models #gray{
    component course.js {
class courseSchema{
const { Schema, model } = require('mongoose');

const courseSchema = new Schema({
  title: {
type: String,
    required: true,
  },
  price: {
    type: Number,
    required: true,
  },
  img: String,
  description: {
    type: Object,
  },
  userId: {
    type: Schema.Types.ObjectId,
    ref: 'User',
  },
});

courseSchema.method('toClient', function () {
  const course = this.toObject();
  course.id = course._id;
  delete course._id;
  return course;
});

module.exports = model('Course', courseSchema);
}
    }

}

package utils{
  component validators.js{
    class courseValidators{
      exports.courseValidators = [
  body('title')
    .isLength({ min: 3 })
    .withMessage('Минимальная длинна названия 3 символа')
    .trim(),
  body('price').isNumeric().withMessage('Введите корректную цену'),
  body('img', 'Введите корректный url картинки').isURL(),
  body('description')
    .isLength({ min: 0 })
    .withMessage('Введите минимальное HTML описание курса'),
];
    }
  }
}

package middleware{
  component auth.js{
    class isAuthenticated{
      // middleware auth.js
module.exports = function (req, res, next) {
  if (!req.session.isAuthenticated) {
    return res.redirect('/auth/login');}
  next();
};

    }
  }
}





database MongoDB{

}

course_edit.hbs <- -> edit
edit -up-> courses.hbs
edit <-right-> courseSchema
courseSchema <-> MongoDB


courseValidators <-down-> edit
isAuthenticated <-down-> edit


@enduml

PlantUML version 1.2020.10(Sun May 17 12:35:57 MSK 2020)
(GPL source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) 64-Bit Server VM
Java Version: 1.8.0_241-b07
Operating System: Windows 10
Default Encoding: Cp1251
Language: ru
Country: RU
--></g></svg>