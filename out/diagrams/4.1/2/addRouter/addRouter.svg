<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="4521.875px" preserveAspectRatio="none" style="width:5287px;height:4521px;background:#777777;" version="1.1" viewBox="0 0 5287 4521" width="5287.5px" zoomAndPan="magnify"><defs/><g><!--MD5=[e2a75efa8a0f57c2afae8bf75386f79c]
cluster views--><polygon fill="#808080" points="1112.5,75,1296.875,75,1318.75,172.3633,2184.375,172.3633,2184.375,431.25,1112.5,431.25,1112.5,75" style="stroke: #000000; stroke-width: 4.6875;"/><line style="stroke: #000000; stroke-width: 4.6875;" x1="1112.5" x2="1318.75" y1="172.3633" y2="172.3633"/><text fill="#000000" font-family="sans-serif" font-size="62.5" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="165.625" x="1125" y="146.1304">views</text><!--MD5=[aee47e4adc368b23a2c75b05fcb7ca1e]
cluster routes--><polygon fill="#808080" points="68.75,506.25,278.125,506.25,300,603.6133,3468.75,603.6133,3468.75,4256.25,68.75,4256.25,68.75,506.25" style="stroke: #000000; stroke-width: 4.6875;"/><line style="stroke: #000000; stroke-width: 4.6875;" x1="68.75" x2="300" y1="603.6133" y2="603.6133"/><text fill="#000000" font-family="sans-serif" font-size="62.5" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="190.625" x="81.25" y="577.3804">routes</text><!--MD5=[24f703fb476ca6f8ec24689634d59fa7]
cluster add.js--><rect fill="#2F4F4F" height="3512.5" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="1762.5" x="1631.25" y="668.75"/><rect fill="#2F4F4F" height="31.25" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="46.875" x="3331.25" y="684.375"/><rect fill="#2F4F4F" height="6.25" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="12.5" x="3325" y="690.625"/><rect fill="#2F4F4F" height="6.25" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="12.5" x="3325" y="703.125"/><text fill="#FFFFFF" font-family="Verdana" font-size="62.5" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="212.5" x="2406.25" y="772.2107">add.js</text><!--MD5=[e5bc18234cb81ccd7dd8830c661fa314]
cluster courses.js--><rect fill="#2F4F4F" height="1600" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="1412.5" x="143.75" y="1625"/><rect fill="#2F4F4F" height="31.25" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="46.875" x="1493.75" y="1640.625"/><rect fill="#2F4F4F" height="6.25" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="12.5" x="1487.5" y="1646.875"/><rect fill="#2F4F4F" height="6.25" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="12.5" x="1487.5" y="1659.375"/><text fill="#FFFFFF" font-family="Verdana" font-size="62.5" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="356.25" x="671.875" y="1728.4607">courses.js</text><!--MD5=[a60570e4b426f702ccbb0d459e3b9417]
cluster models--><polygon fill="#808080" points="3543.75,1226.5625,3775,1226.5625,3796.875,1323.9258,5218.75,1323.9258,5218.75,3535.9375,3543.75,3535.9375,3543.75,1226.5625" style="stroke: #000000; stroke-width: 4.6875;"/><line style="stroke: #000000; stroke-width: 4.6875;" x1="3543.75" x2="3796.875" y1="1323.9258" y2="1323.9258"/><text fill="#000000" font-family="sans-serif" font-size="62.5" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="212.5" x="3556.25" y="1297.6929">models</text><!--MD5=[2dc90687bafe027e9cd205ba7247115e]
cluster course.js--><rect fill="#2F4F4F" height="2071.875" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="1525" x="3618.75" y="1389.0625"/><rect fill="#2F4F4F" height="31.25" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="46.875" x="5081.25" y="1404.6875"/><rect fill="#2F4F4F" height="6.25" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="12.5" x="5075" y="1410.9375"/><rect fill="#2F4F4F" height="6.25" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="12.5" x="5075" y="1423.4375"/><text fill="#FFFFFF" font-family="Verdana" font-size="62.5" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="318.75" x="4221.875" y="1492.5232">course.js</text><!--MD5=[df1820df7fa3afb9e059ff8c941597fa]
entity add.hbs--><rect fill="#2F4F4F" height="169.7083" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="368.75" x="1765.625" y="212.5"/><rect fill="#2F4F4F" height="31.25" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="46.875" x="2071.875" y="228.125"/><rect fill="#2F4F4F" height="6.25" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="12.5" x="2065.625" y="234.375"/><rect fill="#2F4F4F" height="6.25" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="12.5" x="2065.625" y="246.875"/><text fill="#FFFFFF" font-family="Verdana" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="243.75" x="1812.5" y="337.8357">add.hbs</text><!--MD5=[1e75b17258914e3d4cd4c14a609d2929]
entity courses.hbs--><rect fill="#2F4F4F" height="169.7083" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="493.75" x="1162.5" y="212.5"/><rect fill="#2F4F4F" height="31.25" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="46.875" x="1593.75" y="228.125"/><rect fill="#2F4F4F" height="6.25" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="12.5" x="1587.5" y="234.375"/><rect fill="#2F4F4F" height="6.25" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="12.5" x="1587.5" y="246.875"/><text fill="#FFFFFF" font-family="Verdana" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="368.75" x="1209.375" y="337.8357">courses.hbs</text><!--MD5=[063e1e326d60b6111e12c2de92daa063]
class add--><rect fill="#2E2E2E" height="3326.7395" id="add" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="1662.5" x="1681.25" y="803.125"/><ellipse cx="2445.3125" cy="856.7291" fill="#228811" rx="25" ry="25" style="stroke: #1B1B1B; stroke-width: 3.125;"/><path d="M2447.3145,869.7174 Q2444.5313,869.7174 2442.1631,868.8873 Q2439.7949,868.0573 2438.0859,866.4459 Q2436.4258,864.8346 2435.4736,862.3932 Q2434.5215,859.9518 2434.5215,856.778 Q2434.5215,853.7994 2435.4248,851.3824 Q2436.3281,848.9655 2438.0371,847.2076 Q2439.6484,845.5475 2442.0654,844.6442 Q2444.4824,843.7408 2447.3145,843.7408 Q2448.877,843.7408 2450.1465,843.9117 Q2451.416,844.0826 2452.4902,844.3756 Q2453.6133,844.7174 2454.541,845.108 Q2455.4688,845.4987 2456.1523,845.8405 L2456.1523,851.8951 L2455.4199,851.8951 Q2454.9316,851.5045 2454.2236,850.943 Q2453.5156,850.3815 2452.5879,849.8444 Q2451.6602,849.3073 2450.5859,848.941 Q2449.5117,848.5748 2448.291,848.5748 Q2446.9238,848.5748 2445.7031,848.9899 Q2444.4824,849.4049 2443.457,850.4303 Q2442.4805,851.358 2441.8701,852.9449 Q2441.2598,854.5319 2441.2598,856.778 Q2441.2598,859.1217 2441.9189,860.7086 Q2442.5781,862.2955 2443.5547,863.1744 Q2444.5801,864.1022 2445.8496,864.4928 Q2447.1191,864.8834 2448.3398,864.8834 Q2449.5117,864.8834 2450.6592,864.5416 Q2451.8066,864.1998 2452.7832,863.5651 Q2453.6133,863.1256 2454.3213,862.5641 Q2455.0293,862.0026 2455.4688,861.6119 L2456.1523,861.6119 L2456.1523,867.569 Q2455.2246,868.0084 2454.3701,868.3746 Q2453.5156,868.7408 2452.5391,868.985 Q2451.3184,869.3268 2450.2441,869.5221 Q2449.1699,869.7174 2447.3145,869.7174 Z "/><text fill="#FFFFFF" font-family="Verdana" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="112.5" x="2495.3125" y="881.5857">add</text><line style="stroke: #1B1B1B; stroke-width: 4.6875;" x1="1684.375" x2="3340.625" y1="910.3333" y2="910.3333"/><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="968.75" x="1700" y="987.7136">onst { Router } = require('express');</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="1493.75" x="1700" y="1066.3269">const { validationResult } = require('express-validator');</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="1503.125" x="1700" y="1144.9402">const { courseValidators } = require('../utils/validators');</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="1171.875" x="1700" y="1223.5535">const Course = require('../models/course');</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="1140.625" x="1700" y="1302.1667">const auth = require('../middleware/auth');</text><line style="stroke: #1B1B1B; stroke-width: 3.125; stroke-dasharray: 1.0,2.0;" x1="1684.375" x2="3340.625" y1="1328.3997" y2="1328.3997"/><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="918.75" x="1700" y="1405.78">router.get('/', auth, (req, res) =&gt; {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="493.75" x="1700" y="1484.3933">res.render('add', {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="596.875" x="1700" y="1563.0066">title: 'Добавить курс',</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="315.625" x="1700" y="1641.6199">isAdd: true,</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="62.5" x="1700" y="1720.2332">});</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="62.5" x="1700" y="1798.8464">});</text><line style="stroke: #1B1B1B; stroke-width: 3.125; stroke-dasharray: 1.0,2.0;" x1="1684.375" x2="3340.625" y1="1825.0793" y2="1825.0793"/><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="1625" x="1700" y="1902.4597">router.post('/', auth, courseValidators, async (req, res) =&gt; {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="984.375" x="1700" y="1981.073">const errors = validationResult(req);</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="600" x="1700" y="2059.6863">if (!errors.isEmpty()) {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="1003.125" x="1700" y="2138.2996">return res.status(422).render('add', {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="596.875" x="1700" y="2216.9128">title: 'Добавить курс',</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="315.625" x="1700" y="2295.5261">isAdd: true,</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="768.75" x="1700" y="2374.1394">error: errors.array()[0].msg,</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="181.25" x="1700" y="2452.7527">data: {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="512.5" x="1700" y="2531.366">title: req.body.title,</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="587.5" x="1700" y="2609.9792">price: req.body.price,</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="512.5" x="1700" y="2688.5925">img: req.body.img,</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="912.5" x="1700" y="2767.2058">description: req.body.description,</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="40.625" x="1700" y="2845.8191">},</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="84.375" x="1700" y="2924.4324">});}</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="0" x="1718.75" y="3003.0457"/><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="796.875" x="1700" y="3081.6589">const course = new Course({</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="512.5" x="1700" y="3160.2722">title: req.body.title,</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="587.5" x="1700" y="3238.8855">price: req.body.price,</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="512.5" x="1700" y="3317.4988">img: req.body.img,</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="912.5" x="1700" y="3396.1121">description: req.body.description,</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="456.25" x="1700" y="3474.7253">userId: req.user,</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="62.5" x="1700" y="3553.3386">});</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="0" x="1718.75" y="3631.9519"/><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="112.5" x="1700" y="3710.5652">try {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="559.375" x="1700" y="3789.1785">await course.save();</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="637.5" x="1700" y="3867.7917">res.redirect('/courses');</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="325" x="1700" y="3946.405">} catch (e) {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="428.125" x="1700" y="4025.0183">console.log(e);}</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="62.5" x="1700" y="4103.6316">});</text><!--MD5=[95817ce66f648d62e9ca0480ed3f59d5]
class Course__find--><rect fill="#2E2E2E" height="1415.0208" id="Course__find" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="1312.5" x="193.75" y="1759.375"/><ellipse cx="629.6875" cy="1812.9791" fill="#228811" rx="25" ry="25" style="stroke: #1B1B1B; stroke-width: 3.125;"/><path d="M631.6895,1825.9674 Q628.9063,1825.9674 626.5381,1825.1373 Q624.1699,1824.3073 622.4609,1822.6959 Q620.8008,1821.0846 619.8486,1818.6432 Q618.8965,1816.2018 618.8965,1813.028 Q618.8965,1810.0494 619.7998,1807.6324 Q620.7031,1805.2155 622.4121,1803.4576 Q624.0234,1801.7975 626.4404,1800.8942 Q628.8574,1799.9908 631.6895,1799.9908 Q633.252,1799.9908 634.5215,1800.1617 Q635.791,1800.3326 636.8652,1800.6256 Q637.9883,1800.9674 638.916,1801.358 Q639.8438,1801.7487 640.5273,1802.0905 L640.5273,1808.1451 L639.7949,1808.1451 Q639.3066,1807.7545 638.5986,1807.193 Q637.8906,1806.6315 636.9629,1806.0944 Q636.0352,1805.5573 634.9609,1805.191 Q633.8867,1804.8248 632.666,1804.8248 Q631.2988,1804.8248 630.0781,1805.2399 Q628.8574,1805.6549 627.832,1806.6803 Q626.8555,1807.608 626.2451,1809.1949 Q625.6348,1810.7819 625.6348,1813.028 Q625.6348,1815.3717 626.2939,1816.9586 Q626.9531,1818.5455 627.9297,1819.4244 Q628.9551,1820.3522 630.2246,1820.7428 Q631.4941,1821.1334 632.7148,1821.1334 Q633.8867,1821.1334 635.0342,1820.7916 Q636.1816,1820.4498 637.1582,1819.8151 Q637.9883,1819.3756 638.6963,1818.8141 Q639.4043,1818.2526 639.8438,1817.8619 L640.5273,1817.8619 L640.5273,1823.819 Q639.5996,1824.2584 638.7451,1824.6246 Q637.8906,1824.9908 636.9141,1825.235 Q635.6934,1825.5768 634.6191,1825.7721 Q633.5449,1825.9674 631.6895,1825.9674 Z "/><text fill="#FFFFFF" font-family="Verdana" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="418.75" x="679.6875" y="1837.8357">Course__find</text><line style="stroke: #1B1B1B; stroke-width: 4.6875;" x1="196.875" x2="1503.125" y1="1866.5833" y2="1866.5833"/><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="112.5" x="212.5" y="1943.9636">try {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="0" x="231.25" y="2022.5769"/><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="356.25" x="212.5" y="2101.1902">title: 'Курсы',</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="434.375" x="212.5" y="2179.8035">isCourses: true,</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="234.375" x="212.5" y="2258.4167">courses,</text><line style="stroke: #1B1B1B; stroke-width: 4.6875;" x1="196.875" x2="1503.125" y1="2284.6497" y2="2284.6497"/><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="943.75" x="212.5" y="2362.03">router.get('/', async (req, res) =&gt; {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="978.125" x="212.5" y="2440.6433">const courses = await Course.find()</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="868.75" x="212.5" y="2519.2566">.populate('userId', 'email name')</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="634.375" x="212.5" y="2597.8699">.select('price title img');</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="0" x="231.25" y="2676.4832"/><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="606.25" x="212.5" y="2755.0964">res.render('courses', {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="1275" x="212.5" y="2833.7097">userId: req.user ? req.user._id.toString() : null,</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="62.5" x="212.5" y="2912.323">});</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="325" x="212.5" y="2990.9363">} catch (e) {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="428.125" x="212.5" y="3069.5496">console.log(e);}</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="62.5" x="212.5" y="3148.1628">});</text><!--MD5=[3c8afb8c3a917f644ec1ad74ecd38fae]
class courseSchema--><rect fill="#2E2E2E" height="1886.7004" id="courseSchema" style="stroke: #1B1B1B; stroke-width: 4.6875;" width="1425" x="3668.75" y="1523.4375"/><ellipse cx="4142.1875" cy="1577.0416" fill="#228811" rx="25" ry="25" style="stroke: #1B1B1B; stroke-width: 3.125;"/><path d="M4144.1895,1590.0299 Q4141.4063,1590.0299 4139.0381,1589.1998 Q4136.6699,1588.3698 4134.9609,1586.7584 Q4133.3008,1585.1471 4132.3486,1582.7057 Q4131.3965,1580.2643 4131.3965,1577.0905 Q4131.3965,1574.1119 4132.2998,1571.6949 Q4133.2031,1569.278 4134.9121,1567.5201 Q4136.5234,1565.86 4138.9404,1564.9567 Q4141.3574,1564.0533 4144.1895,1564.0533 Q4145.752,1564.0533 4147.0215,1564.2242 Q4148.291,1564.3951 4149.3652,1564.6881 Q4150.4883,1565.0299 4151.416,1565.4205 Q4152.3438,1565.8112 4153.0273,1566.153 L4153.0273,1572.2076 L4152.2949,1572.2076 Q4151.8066,1571.817 4151.0986,1571.2555 Q4150.3906,1570.694 4149.4629,1570.1569 Q4148.5352,1569.6198 4147.4609,1569.2535 Q4146.3867,1568.8873 4145.166,1568.8873 Q4143.7988,1568.8873 4142.5781,1569.3024 Q4141.3574,1569.7174 4140.332,1570.7428 Q4139.3555,1571.6705 4138.7451,1573.2574 Q4138.1348,1574.8444 4138.1348,1577.0905 Q4138.1348,1579.4342 4138.7939,1581.0211 Q4139.4531,1582.608 4140.4297,1583.4869 Q4141.4551,1584.4147 4142.7246,1584.8053 Q4143.9941,1585.1959 4145.2148,1585.1959 Q4146.3867,1585.1959 4147.5342,1584.8541 Q4148.6816,1584.5123 4149.6582,1583.8776 Q4150.4883,1583.4381 4151.1963,1582.8766 Q4151.9043,1582.3151 4152.3438,1581.9244 L4153.0273,1581.9244 L4153.0273,1587.8815 Q4152.0996,1588.3209 4151.2451,1588.6871 Q4150.3906,1589.0533 4149.4141,1589.2975 Q4148.1934,1589.6393 4147.1191,1589.8346 Q4146.0449,1590.0299 4144.1895,1590.0299 Z "/><text fill="#FFFFFF" font-family="Verdana" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="456.25" x="4192.1875" y="1601.8982">courseSchema</text><line style="stroke: #1B1B1B; stroke-width: 4.6875;" x1="3671.875" x2="5090.625" y1="1630.6458" y2="1630.6458"/><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="156.25" x="3687.5" y="1708.0261">title: {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="334.375" x="3687.5" y="1786.6394">type: String,</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="387.5" x="3687.5" y="1865.2527">required: true,</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="40.625" x="3687.5" y="1943.866">},</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="193.75" x="3687.5" y="2022.4792">price: {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="387.5" x="3687.5" y="2101.0925">type: Number,</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="387.5" x="3687.5" y="2179.7058">required: true,</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="40.625" x="3687.5" y="2258.3191">},</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="312.5" x="3687.5" y="2336.9324">img: String,</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="356.25" x="3687.5" y="2415.5457">description: {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="356.25" x="3687.5" y="2494.1589">type: Object,</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="40.625" x="3687.5" y="2572.7722">},</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="231.25" x="3687.5" y="2651.3855">userId: {</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="837.5" x="3687.5" y="2729.9988">type: Schema.Types.ObjectId,</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="284.375" x="3687.5" y="2808.6121">ref: 'User',</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="40.625" x="3687.5" y="2887.2253">},</text><line style="stroke: #1B1B1B; stroke-width: 4.6875;" x1="3671.875" x2="5090.625" y1="2913.4583" y2="2913.4583"/><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="1309.375" x="3687.5" y="2990.8386">const { Schema, model } = require('mongoose');</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="0" x="3706.25" y="3069.4519"/><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="1043.75" x="3687.5" y="3148.0652">const courseSchema = new Schema({</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="62.5" x="3687.5" y="3226.6785">});</text><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="0" x="3706.25" y="3305.2917"/><text fill="#AAAAAA" font-family="sans-serif" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="1387.5" x="3687.5" y="3383.905">module.exports = model('Course', courseSchema);</text><!--MD5=[ba72416187da2a396e219ea5b5d73a26]
entity MongoDB--><path d="M4201.5625,4350 C4201.5625,4318.75 4381.25,4318.75 4381.25,4318.75 C4381.25,4318.75 4560.9375,4318.75 4560.9375,4350 L4560.9375,4454.0833 C4560.9375,4485.3333 4381.25,4485.3333 4381.25,4485.3333 C4381.25,4485.3333 4201.5625,4485.3333 4201.5625,4454.0833 L4201.5625,4350 " fill="#2E2E2E" style="stroke: #1B1B1B; stroke-width: 4.6875;"/><path d="M4201.5625,4350 C4201.5625,4381.25 4381.25,4381.25 4381.25,4381.25 C4381.25,4381.25 4560.9375,4381.25 4560.9375,4350 " fill="none" style="stroke: #1B1B1B; stroke-width: 4.6875;"/><text fill="#FFFFFF" font-family="Verdana" font-size="62.5" lengthAdjust="spacingAndGlyphs" textLength="296.875" x="4232.8125" y="4456.5857">MongoDB</text><!--MD5=[ffc61dd73a677f3bf0aca479fda0c9a1]
link add.hbs to add--><path d="M1971.3625,382.1875 C1993.475,467.25 2031.125,612.0937 2076.6063,787.0937 " fill="none" id="add.hbs-&gt;add" style="stroke: #FF0000; stroke-width: 3.125;"/><polygon fill="#FF0000" points="2080.7438,803,2085.7695,772.6354,2076.8146,787.8771,2061.5729,778.9221,2080.7438,803" style="stroke: #FF0000; stroke-width: 3.125;"/><!--MD5=[0101042b1a8c97482ce0b40b8aaacb6a]
link add to courseSchema--><path d="M3360.2188,2467.1875 C3457.5938,2467.1875 3554.9687,2467.1875 3652.3438,2467.1875 " fill="none" id="add-courseSchema" style="stroke: #FF0000; stroke-width: 3.125;"/><polygon fill="#FF0000" points="3667.9688,2467.1875,3639.8438,2454.6875,3652.3438,2467.1875,3639.8438,2479.6875,3667.9688,2467.1875" style="stroke: #FF0000; stroke-width: 3.125;"/><polygon fill="#FF0000" points="3343.75,2467.1875,3371.875,2479.6875,3359.375,2467.1875,3371.875,2454.6875,3343.75,2467.1875" style="stroke: #FF0000; stroke-width: 3.125;"/><!--MD5=[36c75509c46fa5983c56510b542aa3be]
reverse link Course__find to add--><path d="M1523.0188,2467.1875 C1575.5344,2467.1875 1628.0531,2467.1875 1680.5719,2467.1875 " fill="none" id="Course__find&lt;-add" style="stroke: #FF0000; stroke-width: 3.125;"/><polygon fill="#FF0000" points="1506.7188,2467.1875,1534.8438,2479.6875,1522.3438,2467.1875,1534.8438,2454.6875,1506.7188,2467.1875" style="stroke: #FF0000; stroke-width: 3.125;"/><!--MD5=[15ab8eb559fe119814b44df5b29eb662]
link courseSchema to MongoDB--><path d="M4381.25,3428.0844 C4381.25,3781.5 4381.25,4136.0469 4381.25,4301.7253 " fill="none" id="courseSchema-MongoDB" style="stroke: #FF0000; stroke-width: 3.125;"/><polygon fill="#FF0000" points="4381.25,4318.1194,4393.75,4289.9944,4381.25,4302.4944,4368.75,4289.9944,4381.25,4318.1194" style="stroke: #FF0000; stroke-width: 3.125;"/><polygon fill="#FF0000" points="4381.25,3411.7813,4368.75,3439.9063,4381.25,3427.4063,4393.75,3439.9063,4381.25,3411.7813" style="stroke: #FF0000; stroke-width: 3.125;"/><!--MD5=[bd0f9acb70061289501e41181220414c]
reverse link courses.hbs to Course__find--><path d="M1383.8781,398.625 C1322.4219,636.4063 1161.6313,1258.4375 1032.4531,1758.2063 " fill="none" id="courses.hbs&lt;-Course__find" style="stroke: #FF0000; stroke-width: 3.125;"/><polygon fill="#FF0000" points="1388.1313,382.1875,1368.9639,406.2681,1384.2042,397.311,1393.1614,412.5513,1388.1313,382.1875" style="stroke: #FF0000; stroke-width: 3.125;"/><!--MD5=[5ac6157467ce04f0af80810b908bd691]
@startuml
!define DARKGREEN
!includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml

skinparam {
    Shadowing false
    Dpi 300
  ClassAttributeFontSize 20
  ClassFontSize 20
  ComponentFontSize 20
  PackageFontSize 20
  DatabaseFontSize 20
  ComponentBackgroundColor DarkSlateGrey
  ArrowColor red
}


package views #gray{
    component add.hbs {

    }
    component courses.hbs{

    }
}

package routes #gray{
    component add.js {
    class add{ 
      onst { Router } = require('express');
const { validationResult } = require('express-validator');
const { courseValidators } = require('../utils/validators');
const Course = require('../models/course');
const auth = require('../middleware/auth');
....
  router.get('/', auth, (req, res) => {
  res.render('add', {
    title: 'Добавить курс',
    isAdd: true,
  });
});
....
router.post('/', auth, courseValidators, async (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(422).render('add', {
      title: 'Добавить курс',
      isAdd: true,
      error: errors.array()[0].msg,
      data: {
        title: req.body.title,
        price: req.body.price,
        img: req.body.img,
        description: req.body.description,
      },
    });}

  const course = new Course({
    title: req.body.title,
    price: req.body.price,
    img: req.body.img,
    description: req.body.description,
    userId: req.user,
  });

  try {
    await course.save();
    res.redirect('/courses');
  } catch (e) {
    console.log(e);}
});
    }
    }

    component courses.js{
class Course__find{
  router.get('/', async (req, res) => {
  try {
    const courses = await Course.find()
      .populate('userId', 'email name')
      .select('price title img');

    res.render('courses', {
      title: 'Курсы',
      isCourses: true,
      userId: req.user ? req.user._id.toString() : null,
      courses,
    });
  } catch (e) {
    console.log(e);}
});
}
    }
}

' package utils #gray{
'     component validator.js {
' class courseValidators{
'     exports.courseValidators = [
'   body('title')
'     .isLength({ min: 3 })
'     .withMessage('Минимальная длинна названия 3 символа')
'     .trim(),
'   body('price').isNumeric().withMessage('Введите корректную цену'),
'   body('img', 'Введите корректный url картинки').isURL(),
'   body('description')
'     .isLength({ min: 0 })
'     .withMessage('Введите минимальное HTML описание курса'),
' ];
' }
'     }
' }

package models #gray{
    component course.js {
class courseSchema{
const { Schema, model } = require('mongoose');

const courseSchema = new Schema({
  title: {
type: String,
    required: true,
  },
  price: {
    type: Number,
    required: true,
  },
  img: String,
  description: {
    type: Object,
  },
  userId: {
    type: Schema.Types.ObjectId,
    ref: 'User',
  },
});

module.exports = model('Course', courseSchema);
}
    }

}

' package middleware #gray{
'     component auth.js {
' class isAuthenticated{
'     // middleware auth.js
' module.exports = function (req, res, next) {
'   if (!req.session.isAuthenticated) {
'     return res.redirect('/auth/login');}
'   next();
' };
' }
'     }
' }

' package public{
'   component app.js{
'     class toCurrency{
'       const toCurrency = (price) => {
'   return new Intl.NumberFormat('ru-RU', {
'     currency: 'BYN',
'     style: 'currency',
'   }).format(price);
' };

'     }
'   }
' }

database MongoDB{

}

add.hbs -right-> add
' add <- -> courseValidators
' add <- -> isAuthenticated
add <-right-> courseSchema
add -left-> Course__find

courseSchema <- -> MongoDB

Course__find -up-> courses.hbs
' toCurrency - -> courses.hbs

' courses.hbs -[hidden]- add.hbs


@enduml

@startuml







skinparam stereotypeCBackgroundColor 228811





skinparam backgroundColor 777







skinparam circledCharacter {
  radius 8
  fontSize 11
  fontName Verdana
}

skinparam class {
    backgroundColor 2e2e2e
  borderColor 1b1b1b
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
    arrowColor fff
  arrowFontName Verdana
  arrowFontColor bbb
  arrowFontSize 11

  attributeFontColor aaa
  attributeFontSize 11
  attributeIconSize 11
}


skinparam actor {
    backgroundColor 228811
  borderColor 113300
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
}

skinparam participant {
    backgroundColor 2e2e2e
  borderColor 1b1b1b
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
}

skinparam collections {
    backgroundColor 2e2e2e
  borderColor 1b1b1b
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
}

skinparam SequenceBox{
    backgroundColor 575757
  borderColor 767676
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
}


skinparam interface {
    backgroundColor 228811
  borderColor 113300
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
}

skinparam component {
    backgroundColor 2e2e2e
  borderColor 1b1b1b
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
}

skinparam node {
    backgroundColor 2e2e2e
  borderColor 1b1b1b
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
}

skinparam database {
    backgroundColor 2e2e2e
  borderColor 1b1b1b
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
}

skinparam queue {
    backgroundColor 2e2e2e
  borderColor 1b1b1b
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
}


skinparam usecase {
    backgroundColor 2e2e2e
  borderColor 1b1b1b
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
    arrowColor fff
  arrowFontName Verdana
  arrowFontColor bbb
  arrowFontSize 11
}

skinparam activity {
    backgroundColor 2e2e2e
  borderColor 1b1b1b
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
    arrowColor fff
  arrowFontName Verdana
  arrowFontColor bbb
  arrowFontSize 11
}

skinparam sequence {
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
    arrowColor fff
  arrowFontName Verdana
  arrowFontColor bbb
  arrowFontSize 11

  lifeLineBorderColor 228811
  lifeLineBackgroundColor 575757
}

skinparam boundary {
    backgroundColor 228811
  borderColor 113300
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
}

skinparam control {
    backgroundColor 228811
  borderColor 113300
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
}

skinparam entity {
    backgroundColor 228811
  borderColor 113300
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
}


skinparam state {
    backgroundColor 2e2e2e
  borderColor 1b1b1b
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
    arrowColor fff
  arrowFontName Verdana
  arrowFontColor bbb
  arrowFontSize 11
  startColor 228811
  endColor 113300
}


skinparam object {
    backgroundColor 2e2e2e
  borderColor 1b1b1b
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
    arrowColor fff
  arrowFontName Verdana
  arrowFontColor bbb
  arrowFontSize 11
}


skinparam note {
    backgroundColor 228811
  borderColor 113300
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
}

skinparam cloud {
    backgroundColor 2e2e2e
  borderColor 1b1b1b
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
    arrowColor fff
  arrowFontName Verdana
  arrowFontColor bbb
  arrowFontSize 11
}

skinparam rectangle {
    backgroundColor 2e2e2e
  borderColor 1b1b1b
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
}

skinparam storage {
    backgroundColor 2e2e2e
  borderColor 1b1b1b
    fontColor fff
  fontName Verdana
  fontSize 11
  stereotypeFontColor aaa
  stereotypeFontSize 11
}


skinparam {
    Shadowing false
    Dpi 300
  ClassAttributeFontSize 20
  ClassFontSize 20
  ComponentFontSize 20
  PackageFontSize 20
  DatabaseFontSize 20
  ComponentBackgroundColor DarkSlateGrey
  ArrowColor red
}


package views #gray{
    component add.hbs {

    }
    component courses.hbs{

    }
}

package routes #gray{
    component add.js {
    class add{ 
      onst { Router } = require('express');
const { validationResult } = require('express-validator');
const { courseValidators } = require('../utils/validators');
const Course = require('../models/course');
const auth = require('../middleware/auth');
....
  router.get('/', auth, (req, res) => {
  res.render('add', {
    title: 'Добавить курс',
    isAdd: true,
  });
});
....
router.post('/', auth, courseValidators, async (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(422).render('add', {
      title: 'Добавить курс',
      isAdd: true,
      error: errors.array()[0].msg,
      data: {
        title: req.body.title,
        price: req.body.price,
        img: req.body.img,
        description: req.body.description,
      },
    });}

  const course = new Course({
    title: req.body.title,
    price: req.body.price,
    img: req.body.img,
    description: req.body.description,
    userId: req.user,
  });

  try {
    await course.save();
    res.redirect('/courses');
  } catch (e) {
    console.log(e);}
});
    }
    }

    component courses.js{
class Course__find{
  router.get('/', async (req, res) => {
  try {
    const courses = await Course.find()
      .populate('userId', 'email name')
      .select('price title img');

    res.render('courses', {
      title: 'Курсы',
      isCourses: true,
      userId: req.user ? req.user._id.toString() : null,
      courses,
    });
  } catch (e) {
    console.log(e);}
});
}
    }
}


package models #gray{
    component course.js {
class courseSchema{
const { Schema, model } = require('mongoose');

const courseSchema = new Schema({
  title: {
type: String,
    required: true,
  },
  price: {
    type: Number,
    required: true,
  },
  img: String,
  description: {
    type: Object,
  },
  userId: {
    type: Schema.Types.ObjectId,
    ref: 'User',
  },
});

module.exports = model('Course', courseSchema);
}
    }

}




database MongoDB{

}

add.hbs -right-> add
add <-right-> courseSchema
add -left-> Course__find

courseSchema <- -> MongoDB

Course__find -up-> courses.hbs



@enduml

PlantUML version 1.2020.10(Sun May 17 12:35:57 MSK 2020)
(GPL source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) 64-Bit Server VM
Java Version: 1.8.0_241-b07
Operating System: Windows 10
Default Encoding: Cp1251
Language: ru
Country: RU
--></g></svg>